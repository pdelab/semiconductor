# Copyright (C) 2014 CCMA@PSU Maximilian Metti, Xiaozhe Hu
#
#   Define bilinear and linear forms for 
#   the linearized Poisson-Nernst-Planck equations
#
# Compile this form with FFC: ffc -O -l dolfin semiconductor.ufl.

##  Finite Element Space
CG = FiniteElement("Lagrange", tetrahedron, 1)
V  = MixedElement([CG,CG,CG])        # Solution Space

(Cat, An, Phi) = TrialFunction(V)
(cat, an, phi) = TestFunction(V)


##  Previous Iterates
CatCat  = Coefficient(CG)
AnAn    = Coefficient(CG)
EsEs    = Coefficient(CG)


##  Coefficients
eps_p = Constant(tetrahedron)
eps_n = Constant(tetrahedron)
Dp_p  = Constant(tetrahedron)
Dp_n  = Constant(tetrahedron)
qp    = Constant(tetrahedron)
Dn_p  = Constant(tetrahedron)
Dn_n  = Constant(tetrahedron)
qn    = Constant(tetrahedron)
fix_p = Constant(tetrahedron)
fix_n = Constant(tetrahedron)

## Boundary terms
#capacitance = Coefficient(CG)
#surface_pot = Coefficient(CG)
#n_vec      = FacetNormal(CG.cell())



a   = ( Dp_p*exp(CatCat)*(inner(grad(Cat),grad(cat))  + Cat*(inner(grad(CatCat)+qp*grad(EsEs),grad(cat))) + qp*(inner(grad(Phi),grad(cat)))) )*dx(1) \
 	+ ( Dp_n*exp(CatCat)*(inner(grad(Cat),grad(cat))  + Cat*(inner(grad(CatCat)+qp*grad(EsEs),grad(cat))) + qp*(inner(grad(Phi),grad(cat)))) )*dx(2) \
    + ( Dn_p*exp(AnAn)  *(inner(grad(An),grad(an))    +  An*(inner(grad(AnAn)  +qn*grad(EsEs),grad(an)))  + qn*(inner(grad(Phi),grad(an))))  )*dx(1) \
    + ( Dn_n*exp(AnAn)  *(inner(grad(An),grad(an))    +  An*(inner(grad(AnAn)  +qn*grad(EsEs),grad(an)))  + qn*(inner(grad(Phi),grad(an))))  )*dx(2) \
    + ( eps_p*inner(grad(Phi),grad(phi)) )*dx(1) + ( eps_n*inner(grad(Phi),grad(phi)) )*dx(2) \
    - ( ( qp*exp(CatCat)*Cat + qn*exp(AnAn)*An )*phi )*dx

L   = - ( Dp_p*exp(CatCat)*( inner(grad(CatCat),grad(cat)) + qp*(inner(grad(EsEs),grad(cat)))) )*dx(1) \
 	  - ( Dp_n*exp(CatCat)*( inner(grad(CatCat),grad(cat)) + qp*(inner(grad(EsEs),grad(cat)))) )*dx(2) \
      - ( Dn_p*exp(AnAn)  *( inner(grad(AnAn),  grad(an))  + qn*(inner(grad(EsEs),grad(an))))  )*dx(1) \
      - ( Dn_n*exp(AnAn)  *( inner(grad(AnAn),  grad(an))  + qn*(inner(grad(EsEs),grad(an))))  )*dx(2) \
      - ( eps_p*inner(grad(EsEs),grad(phi)) )*dx(1)  - (eps_n*inner(grad(EsEs),grad(phi)))*dx(2)  \
      + ( ( qp*exp(CatCat) + qn*exp(AnAn) )*phi )*dx + (fix_p*phi)*dx(1) + (fix_n*phi)*dx(2)

