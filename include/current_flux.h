// This code conforms with the UFC specification version 1.5.0
// and was automatically generated by FFC version 1.5.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __CURRENT_FLUX_H
#define __CURRENT_FLUX_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class current_flux_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  current_flux_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new current_flux_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class current_flux_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  current_flux_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Real', Domain(Cell('tetrahedron', 3)), 0, 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 2:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[1] = vals[1];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[2] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[9] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[4] = dof_values[1];
    vertex_values[7] = dof_values[1];
    vertex_values[10] = dof_values[1];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[2];
    vertex_values[5] = dof_values[2];
    vertex_values[8] = dof_values[2];
    vertex_values[11] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 1:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 2:
      {
        return new current_flux_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new current_flux_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class current_flux_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  current_flux_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new current_flux_finite_element_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class current_flux_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  current_flux_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new current_flux_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class current_flux_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  current_flux_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Real', Domain(Cell('tetrahedron', 3)), 0, 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset;
    offset += 1;
    dofs[1] = offset;
    offset += 1;
    dofs[2] = offset;
    offset += 1;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    dof_coordinates[3] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[4] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[5] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    dof_coordinates[6] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[7] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[8] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 1:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 2:
      {
        return new current_flux_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new current_flux_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class current_flux_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  current_flux_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new current_flux_dofmap_2();
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class current_flux_interior_facet_integral_0_8: public ufc::interior_facet_integral
{
public:

  /// Constructor
  current_flux_interior_facet_integral_0_8() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_interior_facet_integral_0_8()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true, true, true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    const double facet_area = det/2.0;
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Compute cell volume
    // Compute cell volume
    
    
    // Compute circumradius
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W6[6] = {0.0833333333333333, 0.0833333333333333, 0.0833333333333333, 0.0833333333333333, 0.0833333333333333, 0.0833333333333333};
    // Quadrature points on the UFC reference element: (0.659027622374092, 0.231933368553031), (0.659027622374092, 0.109039009072877), (0.231933368553031, 0.659027622374092), (0.231933368553031, 0.109039009072877), (0.109039009072877, 0.659027622374092), (0.109039009072877, 0.231933368553031)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0[6][3] = \
    {{0.109039009072877, 0.659027622374092, 0.231933368553031},
    {0.231933368553031, 0.659027622374092, 0.109039009072877},
    {0.109039009072877, 0.231933368553031, 0.659027622374092},
    {0.659027622374092, 0.231933368553031, 0.109039009072877},
    {0.231933368553031, 0.109039009072877, 0.659027622374092},
    {0.659027622374092, 0.109039009072877, 0.231933368553031}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[3] = {1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc4[3] = {0, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[3] = {0, 1, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc6[3] = {0, 1, 2};
    
    static const double FE0_f0_D001[6][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 1};
    
    // Reset values in the element tensor.
    A[0] = 0.0;
    // Number of operations to compute geometry constants: 504.
    double G[48];
    G[0] = 0.5*det*w[5][0]*w[6][0]*w[6][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[1] = 0.5*det*w[7][0]*w[8][0]*w[8][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[2] = 0.5*det*w[10][0]*w[10][0]*w[9][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[3] = 0.5*det*w[11][0]*w[12][0]*w[12][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[4] = 0.5*det*w[5][0]*w[6][0]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[5] = 0.5*det*w[5][0]*w[6][0]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[6] = 0.5*det*w[5][0]*w[6][0]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[7] = 0.5*det*w[7][0]*w[8][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[8] = 0.5*det*w[7][0]*w[8][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[9] = 0.5*det*w[7][0]*w[8][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[10] = 0.5*det*w[7][0]*w[8][0]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[11] = 0.5*det*w[7][0]*w[8][0]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[12] = 0.5*det*w[7][0]*w[8][0]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[13] = 0.5*det*w[5][0]*w[6][0]*w[6][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[14] = 0.5*det*w[7][0]*w[8][0]*w[8][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[15] = 0.5*det*w[10][0]*w[10][0]*w[9][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[16] = 0.5*det*w[11][0]*w[12][0]*w[12][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[17] = 0.5*det*w[10][0]*w[9][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[18] = 0.5*det*w[10][0]*w[9][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[19] = 0.5*det*w[10][0]*w[9][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[20] = 0.5*det*w[10][0]*w[9][0]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[21] = 0.5*det*w[10][0]*w[9][0]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[22] = 0.5*det*w[10][0]*w[9][0]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[23] = 0.5*det*w[11][0]*w[12][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[24] = 0.5*det*w[11][0]*w[12][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[25] = 0.5*det*w[5][0]*w[6][0]*w[6][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[26] = 0.5*det*w[7][0]*w[8][0]*w[8][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[27] = 0.5*det*w[10][0]*w[10][0]*w[9][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[28] = 0.5*det*w[11][0]*w[12][0]*w[12][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[29] = 0.5*det*w[11][0]*w[12][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[30] = 0.5*det*w[11][0]*w[12][0]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[31] = 0.5*det*w[11][0]*w[12][0]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[32] = 0.5*det*w[11][0]*w[12][0]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[33] = 0.5*det*w[5][0]*w[6][0]*(K_0[0]*w[13][0] + K_0[1]*w[13][1] + K_0[2]*w[13][2])/facet_area;
    G[34] = 0.5*det*w[5][0]*w[6][0]*(K_0[3]*w[13][0] + K_0[4]*w[13][1] + K_0[5]*w[13][2])/facet_area;
    G[35] = 0.5*det*w[5][0]*w[6][0]*(K_0[6]*w[13][0] + K_0[7]*w[13][1] + K_0[8]*w[13][2])/facet_area;
    G[36] = 0.5*det*w[5][0]*w[6][0]*w[6][1]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[37] = 0.5*det*w[7][0]*w[8][0]*w[8][1]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[38] = 0.5*det*w[10][0]*w[10][1]*w[9][0]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[39] = 0.5*det*w[11][0]*w[12][0]*w[12][1]*(K_1[0]*w[13][0] + K_1[1]*w[13][1] + K_1[2]*w[13][2])/facet_area;
    G[40] = 0.5*det*w[5][0]*w[6][0]*w[6][1]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[41] = 0.5*det*w[7][0]*w[8][0]*w[8][1]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[42] = 0.5*det*w[10][0]*w[10][1]*w[9][0]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[43] = 0.5*det*w[11][0]*w[12][0]*w[12][1]*(K_1[3]*w[13][0] + K_1[4]*w[13][1] + K_1[5]*w[13][2])/facet_area;
    G[44] = 0.5*det*w[5][0]*w[6][0]*w[6][1]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[45] = 0.5*det*w[7][0]*w[8][0]*w[8][1]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[46] = 0.5*det*w[10][0]*w[10][1]*w[9][0]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    G[47] = 0.5*det*w[11][0]*w[12][0]*w[12][1]*(K_1[6]*w[13][0] + K_1[7]*w[13][1] + K_1[8]*w[13][2])/facet_area;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc0[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc0[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc0[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc0[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc0[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc0[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc0[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc0[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc0[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc0[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc0[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc0[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc0[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc0[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc0[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc0[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc4[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc4[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc4[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc4[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc4[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc4[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc4[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc4[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc4[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc4[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc4[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc4[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc4[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc5[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc5[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc5[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc5[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc5[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc5[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc5[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc5[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc5[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc5[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc5[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc5[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc5[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc6[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc6[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc6[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc6[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc6[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc6[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc6[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc6[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc6[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 1494
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 1494
        for (unsigned int ip = 0; ip < 6; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          double F8 = 0.0;
          double F9 = 0.0;
          double F10 = 0.0;
          double F11 = 0.0;
          double F12 = 0.0;
          double F13 = 0.0;
          double F14 = 0.0;
          double F15 = 0.0;
          double F16 = 0.0;
          double F17 = 0.0;
          double F18 = 0.0;
          double F19 = 0.0;
          double F20 = 0.0;
          double F21 = 0.0;
          double F22 = 0.0;
          double F23 = 0.0;
          double F24 = 0.0;
          double F25 = 0.0;
          double F26 = 0.0;
          double F27 = 0.0;
          double F28 = 0.0;
          double F29 = 0.0;
          double F30 = 0.0;
          double F31 = 0.0;
          double F32 = 0.0;
          double F33 = 0.0;
          
          // Total number of operations to compute function values = 120
          for (unsigned int r = 0; r < 2; r++)
          {
            F1 += FE0_f0_D001[ip][r]*w[4][nzc3[r]];
            F2 += FE0_f0_D001[ip][r]*w[4][nzc2[r]];
            F3 += FE0_f0_D001[ip][r]*w[4][nzc1[r]];
            F4 += FE0_f0_D001[ip][r]*w[0][nzc3[r]];
            F5 += FE0_f0_D001[ip][r]*w[0][nzc2[r]];
            F6 += FE0_f0_D001[ip][r]*w[0][nzc1[r]];
            F7 += FE0_f0_D001[ip][r]*w[4][nzc3[r] + 4];
            F8 += FE0_f0_D001[ip][r]*w[4][nzc2[r] + 4];
            F9 += FE0_f0_D001[ip][r]*w[4][nzc1[r] + 4];
            F10 += FE0_f0_D001[ip][r]*w[0][nzc3[r] + 4];
            F11 += FE0_f0_D001[ip][r]*w[0][nzc2[r] + 4];
            F12 += FE0_f0_D001[ip][r]*w[0][nzc1[r] + 4];
            F14 += FE0_f0_D001[ip][r]*w[1][nzc3[r]];
            F15 += FE0_f0_D001[ip][r]*w[1][nzc2[r]];
            F16 += FE0_f0_D001[ip][r]*w[1][nzc1[r]];
            F17 += FE0_f0_D001[ip][r]*w[1][nzc3[r] + 4];
            F18 += FE0_f0_D001[ip][r]*w[1][nzc2[r] + 4];
            F19 += FE0_f0_D001[ip][r]*w[1][nzc1[r] + 4];
            F21 += FE0_f0_D001[ip][r]*w[3][nzc3[r]];
            F22 += FE0_f0_D001[ip][r]*w[3][nzc2[r]];
            F23 += FE0_f0_D001[ip][r]*w[3][nzc1[r]];
            F24 += FE0_f0_D001[ip][r]*w[3][nzc3[r] + 4];
            F25 += FE0_f0_D001[ip][r]*w[3][nzc2[r] + 4];
            F26 += FE0_f0_D001[ip][r]*w[3][nzc1[r] + 4];
            F28 += FE0_f0_D001[ip][r]*w[2][nzc3[r]];
            F29 += FE0_f0_D001[ip][r]*w[2][nzc2[r]];
            F30 += FE0_f0_D001[ip][r]*w[2][nzc1[r]];
            F31 += FE0_f0_D001[ip][r]*w[2][nzc3[r] + 4];
            F32 += FE0_f0_D001[ip][r]*w[2][nzc2[r] + 4];
            F33 += FE0_f0_D001[ip][r]*w[2][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 3; r++)
          {
            F0 += FE0_f0[ip][r]*w[0][nzc6[r]];
            F13 += FE0_f0[ip][r]*w[1][nzc6[r]];
            F20 += FE0_f0[ip][r]*w[3][nzc6[r]];
            F27 += FE0_f0[ip][r]*w[2][nzc6[r]];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 104
          double I[1];
          // Number of operations: 104
          I[0] = W6[ip]*(std::exp(F0)*(F1*G[0] + F10*G[4] + F11*G[5] + F12*G[6] + F2*G[13] + F3*G[25] + F4*G[33] + F5*G[34] + F6*G[35] + F7*G[36] + F8*G[40] + F9*G[44]) + std::exp(F13)*(F1*G[1] + F14*G[7] + F15*G[8] + F16*G[9] + F17*G[10] + F18*G[11] + F19*G[12] + F2*G[14] + F3*G[26] + F7*G[37] + F8*G[41] + F9*G[45]) + std::exp(F20)*(F1*G[2] + F2*G[15] + F21*G[17] + F22*G[18] + F23*G[19] + F24*G[20] + F25*G[21] + F26*G[22] + F3*G[27] + F7*G[38] + F8*G[42] + F9*G[46]) + std::exp(F27)*(F1*G[3] + F2*G[16] + F28*G[23] + F29*G[24] + F3*G[28] + F30*G[29] + F31*G[30] + F32*G[31] + F33*G[32] + F7*G[39] + F8*G[43] + F9*G[47]));
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[0] += I[0];
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class current_flux_form_0: public ufc::form
{
public:

  /// Constructor
  current_flux_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~current_flux_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "5b8970a341140c9f3a8be18bd19fa31b8c9140160100e4795265dbf52bf285dfbb58b9757c098df96f05fc4df2e68d217b64337084198bea49b04671a368dc6a";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 0;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 14;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 0;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 9;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return false;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new current_flux_finite_element_2();
        break;
      }
    case 1:
      {
        return new current_flux_finite_element_2();
        break;
      }
    case 2:
      {
        return new current_flux_finite_element_2();
        break;
      }
    case 3:
      {
        return new current_flux_finite_element_2();
        break;
      }
    case 4:
      {
        return new current_flux_finite_element_2();
        break;
      }
    case 5:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 6:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 7:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 8:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 9:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 10:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 11:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 12:
      {
        return new current_flux_finite_element_0();
        break;
      }
    case 13:
      {
        return new current_flux_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new current_flux_dofmap_2();
        break;
      }
    case 1:
      {
        return new current_flux_dofmap_2();
        break;
      }
    case 2:
      {
        return new current_flux_dofmap_2();
        break;
      }
    case 3:
      {
        return new current_flux_dofmap_2();
        break;
      }
    case 4:
      {
        return new current_flux_dofmap_2();
        break;
      }
    case 5:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 6:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 7:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 8:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 9:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 10:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 11:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 12:
      {
        return new current_flux_dofmap_0();
        break;
      }
    case 13:
      {
        return new current_flux_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 8:
      {
        return new current_flux_interior_facet_integral_0_8();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace current_flux
{

class CoefficientSpace_Ca: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Ca(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Ca(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Ca(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Ca(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Cl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Cl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Cl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Cl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Cl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dca: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dca(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dca(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dca(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dca(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dcl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dcl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dcl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dcl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dcl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dk: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dk(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dk(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dk(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dk(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dna: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dna(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dna(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dna(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dna(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Es: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Es(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Es(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Es(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Es(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_K: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_K(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_K(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_K(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_K(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Na: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Na(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Na(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Na(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Na(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_n_vec: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_n_vec(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_n_vec(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_n_vec(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_n_vec(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qca: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qca(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qca(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qca(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qca(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qcl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qcl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qcl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qcl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qcl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qk: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qk(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qk(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qk(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qk(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qna: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qna(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qna(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qna(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qna(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new current_flux_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new current_flux_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_Na Form_M_FunctionSpace_0;

typedef CoefficientSpace_K Form_M_FunctionSpace_1;

typedef CoefficientSpace_Ca Form_M_FunctionSpace_2;

typedef CoefficientSpace_Cl Form_M_FunctionSpace_3;

typedef CoefficientSpace_Es Form_M_FunctionSpace_4;

typedef CoefficientSpace_Dna Form_M_FunctionSpace_5;

typedef CoefficientSpace_qna Form_M_FunctionSpace_6;

typedef CoefficientSpace_Dk Form_M_FunctionSpace_7;

typedef CoefficientSpace_qk Form_M_FunctionSpace_8;

typedef CoefficientSpace_Dcl Form_M_FunctionSpace_9;

typedef CoefficientSpace_qcl Form_M_FunctionSpace_10;

typedef CoefficientSpace_Dca Form_M_FunctionSpace_11;

typedef CoefficientSpace_qca Form_M_FunctionSpace_12;

typedef CoefficientSpace_n_vec Form_M_FunctionSpace_13;

class Form_M: public dolfin::Form
{
public:

  // Constructor
  Form_M(const dolfin::Mesh& mesh):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = reference_to_no_delete_pointer(mesh);
    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Constructor
  Form_M(const dolfin::Mesh& mesh, const dolfin::GenericFunction& Na, const dolfin::GenericFunction& K, const dolfin::GenericFunction& Ca, const dolfin::GenericFunction& Cl, const dolfin::GenericFunction& Es, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca, const dolfin::GenericFunction& n_vec):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = reference_to_no_delete_pointer(mesh);
    this->Na = Na;
    this->K = K;
    this->Ca = Ca;
    this->Cl = Cl;
    this->Es = Es;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;
    this->n_vec = n_vec;

    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Constructor
  Form_M(const dolfin::Mesh& mesh, std::shared_ptr<const dolfin::GenericFunction> Na, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Ca, std::shared_ptr<const dolfin::GenericFunction> Cl, std::shared_ptr<const dolfin::GenericFunction> Es, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca, std::shared_ptr<const dolfin::GenericFunction> n_vec):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = reference_to_no_delete_pointer(mesh);
    this->Na = *Na;
    this->K = *K;
    this->Ca = *Ca;
    this->Cl = *Cl;
    this->Es = *Es;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;
    this->n_vec = *n_vec;

    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Constructor
  Form_M(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = mesh;
    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Constructor
  Form_M(std::shared_ptr<const dolfin::Mesh> mesh, const dolfin::GenericFunction& Na, const dolfin::GenericFunction& K, const dolfin::GenericFunction& Ca, const dolfin::GenericFunction& Cl, const dolfin::GenericFunction& Es, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca, const dolfin::GenericFunction& n_vec):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = mesh;
    this->Na = Na;
    this->K = K;
    this->Ca = Ca;
    this->Cl = Cl;
    this->Es = Es;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;
    this->n_vec = n_vec;

    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Constructor
  Form_M(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> Na, std::shared_ptr<const dolfin::GenericFunction> K, std::shared_ptr<const dolfin::GenericFunction> Ca, std::shared_ptr<const dolfin::GenericFunction> Cl, std::shared_ptr<const dolfin::GenericFunction> Es, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca, std::shared_ptr<const dolfin::GenericFunction> n_vec):
    dolfin::Form(0, 14), Na(*this, 0), K(*this, 1), Ca(*this, 2), Cl(*this, 3), Es(*this, 4), Dna(*this, 5), qna(*this, 6), Dk(*this, 7), qk(*this, 8), Dcl(*this, 9), qcl(*this, 10), Dca(*this, 11), qca(*this, 12), n_vec(*this, 13)
  {
    _mesh = mesh;
    this->Na = *Na;
    this->K = *K;
    this->Ca = *Ca;
    this->Cl = *Cl;
    this->Es = *Es;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;
    this->n_vec = *n_vec;

    _ufc_form = std::shared_ptr<const ufc::form>(new current_flux_form_0());
  }

  // Destructor
  ~Form_M()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "Na")
      return 0;
    else if (name == "K")
      return 1;
    else if (name == "Ca")
      return 2;
    else if (name == "Cl")
      return 3;
    else if (name == "Es")
      return 4;
    else if (name == "Dna")
      return 5;
    else if (name == "qna")
      return 6;
    else if (name == "Dk")
      return 7;
    else if (name == "qk")
      return 8;
    else if (name == "Dcl")
      return 9;
    else if (name == "qcl")
      return 10;
    else if (name == "Dca")
      return 11;
    else if (name == "qca")
      return 12;
    else if (name == "n_vec")
      return 13;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "Na";
    case 1:
      return "K";
    case 2:
      return "Ca";
    case 3:
      return "Cl";
    case 4:
      return "Es";
    case 5:
      return "Dna";
    case 6:
      return "qna";
    case 7:
      return "Dk";
    case 8:
      return "qk";
    case 9:
      return "Dcl";
    case 10:
      return "qcl";
    case 11:
      return "Dca";
    case 12:
      return "qca";
    case 13:
      return "n_vec";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_M_FunctionSpace_0 CoefficientSpace_Na;
  typedef Form_M_FunctionSpace_1 CoefficientSpace_K;
  typedef Form_M_FunctionSpace_2 CoefficientSpace_Ca;
  typedef Form_M_FunctionSpace_3 CoefficientSpace_Cl;
  typedef Form_M_FunctionSpace_4 CoefficientSpace_Es;
  typedef Form_M_FunctionSpace_5 CoefficientSpace_Dna;
  typedef Form_M_FunctionSpace_6 CoefficientSpace_qna;
  typedef Form_M_FunctionSpace_7 CoefficientSpace_Dk;
  typedef Form_M_FunctionSpace_8 CoefficientSpace_qk;
  typedef Form_M_FunctionSpace_9 CoefficientSpace_Dcl;
  typedef Form_M_FunctionSpace_10 CoefficientSpace_qcl;
  typedef Form_M_FunctionSpace_11 CoefficientSpace_Dca;
  typedef Form_M_FunctionSpace_12 CoefficientSpace_qca;
  typedef Form_M_FunctionSpace_13 CoefficientSpace_n_vec;

  // Coefficients
  dolfin::CoefficientAssigner Na;
  dolfin::CoefficientAssigner K;
  dolfin::CoefficientAssigner Ca;
  dolfin::CoefficientAssigner Cl;
  dolfin::CoefficientAssigner Es;
  dolfin::CoefficientAssigner Dna;
  dolfin::CoefficientAssigner qna;
  dolfin::CoefficientAssigner Dk;
  dolfin::CoefficientAssigner qk;
  dolfin::CoefficientAssigner Dcl;
  dolfin::CoefficientAssigner qcl;
  dolfin::CoefficientAssigner Dca;
  dolfin::CoefficientAssigner qca;
  dolfin::CoefficientAssigner n_vec;
};

// Class typedefs
typedef Form_M Functional;

}

#endif
