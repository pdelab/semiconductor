// This code conforms with the UFC specification version 1.5.0
// and was automatically generated by FFC version 1.5.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __MOSFET_H
#define __MOSFET_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mosfet_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mosfet_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mosfet_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class mosfet_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  mosfet_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mosfet_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class mosfet_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  mosfet_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 3;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 1:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 2:
      {
        return new mosfet_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mosfet_finite_element_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mosfet_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  mosfet_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mosfet_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mosfet_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  mosfet_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mosfet_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mosfet_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  mosfet_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (3,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 3*num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 9;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = vertex_coordinates[6];
    dof_coordinates[19] = vertex_coordinates[7];
    dof_coordinates[20] = vertex_coordinates[8];
    dof_coordinates[21] = vertex_coordinates[9];
    dof_coordinates[22] = vertex_coordinates[10];
    dof_coordinates[23] = vertex_coordinates[11];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
    dof_coordinates[30] = vertex_coordinates[6];
    dof_coordinates[31] = vertex_coordinates[7];
    dof_coordinates[32] = vertex_coordinates[8];
    dof_coordinates[33] = vertex_coordinates[9];
    dof_coordinates[34] = vertex_coordinates[10];
    dof_coordinates[35] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 3;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 1:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 2:
      {
        return new mosfet_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mosfet_dofmap_2();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_0_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, false, true, false, true, true, false, true, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 224.
    double G[32];
    G[0] = det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[1] = det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[2] = det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] = det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[4] = det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[5] = det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] = det*w[4][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[7] = det*w[4][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] = det*w[4][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[9] = det*w[4][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[10] = det*w[4][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[11] = det*w[4][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] = det*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[13] = det*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] = det*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[15] = det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[16] = det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] = det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[18] = det*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[19] = det*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[20] = det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[21] = det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[22] = det*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] = det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] = det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] = det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] = det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] = det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] = det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] = det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] =  - det*w[7][0];
    G[31] =  - det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 15000
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 168
      double I[38];
      // Number of operations: 3
      I[0] = G[0]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[1] = G[1]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[2] = G[2]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[3] = G[3]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[4] = G[4]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[5] = G[5]*W15[ip]*std::exp(F1);
      
      // Number of operations: 1
      I[6] = G[6]*W15[ip];
      
      // Number of operations: 1
      I[7] = G[7]*W15[ip];
      
      // Number of operations: 1
      I[8] = G[8]*W15[ip];
      
      // Number of operations: 1
      I[9] = G[9]*W15[ip];
      
      // Number of operations: 1
      I[10] = G[10]*W15[ip];
      
      // Number of operations: 1
      I[11] = G[11]*W15[ip];
      
      // Number of operations: 3
      I[12] = G[12]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[13] = G[13]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[14] = G[14]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[15] = G[15]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[16] = G[16]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[17] = G[17]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[18] = G[18]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[19] = G[19]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[20] = G[20]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[21] = G[21]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[22] = G[22]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[23] = G[23]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[24] = G[24]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[25] = G[25]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[26] = G[26]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[27] = G[27]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[28] = G[28]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[29] = G[29]*W15[ip]*std::exp(F1);
      
      // Number of operations: 14
      I[30] = W15[ip]*std::exp(F1)*(F10*G[4] + F2*G[3] + F3*G[2] + F4*G[1] + F8*G[0] + F9*G[5]);
      
      // Number of operations: 14
      I[31] = W15[ip]*std::exp(F0)*(F2*G[14] + F3*G[13] + F4*G[12] + F5*G[17] + F6*G[16] + F7*G[15]);
      
      // Number of operations: 14
      I[32] = W15[ip]*std::exp(F0)*(F2*G[19] + F3*G[18] + F4*G[13] + F5*G[21] + F6*G[20] + F7*G[16]);
      
      // Number of operations: 14
      I[33] = W15[ip]*std::exp(F0)*(F2*G[22] + F3*G[19] + F4*G[14] + F5*G[23] + F6*G[21] + F7*G[17]);
      
      // Number of operations: 14
      I[34] = W15[ip]*std::exp(F1)*(F10*G[26] + F2*G[1] + F3*G[25] + F4*G[24] + F8*G[4] + F9*G[27]);
      
      // Number of operations: 14
      I[35] = W15[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 3
      I[36] = G[30]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[37] = G[31]*W15[ip]*std::exp(F1);
      
      
      // Number of operations for primary indices: 540
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 144
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[35];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 96
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[37];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_0_2: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_0_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, false, true, false, true, true, false, true, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 224.
    double G[32];
    G[0] = det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[1] = det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[2] = det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] = det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[4] = det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[5] = det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] = det*w[4][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[7] = det*w[4][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] = det*w[4][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[9] = det*w[4][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[10] = det*w[4][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[11] = det*w[4][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] = det*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[13] = det*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] = det*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[15] = det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[16] = det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] = det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[18] = det*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[19] = det*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[20] = det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[21] = det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[22] = det*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] = det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] = det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] = det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] = det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] = det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] = det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] = det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] =  - det*w[7][0];
    G[31] =  - det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 15000
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 168
      double I[38];
      // Number of operations: 3
      I[0] = G[0]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[1] = G[1]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[2] = G[2]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[3] = G[3]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[4] = G[4]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[5] = G[5]*W15[ip]*std::exp(F1);
      
      // Number of operations: 1
      I[6] = G[6]*W15[ip];
      
      // Number of operations: 1
      I[7] = G[7]*W15[ip];
      
      // Number of operations: 1
      I[8] = G[8]*W15[ip];
      
      // Number of operations: 1
      I[9] = G[9]*W15[ip];
      
      // Number of operations: 1
      I[10] = G[10]*W15[ip];
      
      // Number of operations: 1
      I[11] = G[11]*W15[ip];
      
      // Number of operations: 3
      I[12] = G[12]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[13] = G[13]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[14] = G[14]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[15] = G[15]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[16] = G[16]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[17] = G[17]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[18] = G[18]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[19] = G[19]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[20] = G[20]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[21] = G[21]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[22] = G[22]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[23] = G[23]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[24] = G[24]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[25] = G[25]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[26] = G[26]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[27] = G[27]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[28] = G[28]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[29] = G[29]*W15[ip]*std::exp(F1);
      
      // Number of operations: 14
      I[30] = W15[ip]*std::exp(F1)*(F10*G[4] + F2*G[3] + F3*G[2] + F4*G[1] + F8*G[0] + F9*G[5]);
      
      // Number of operations: 14
      I[31] = W15[ip]*std::exp(F0)*(F2*G[14] + F3*G[13] + F4*G[12] + F5*G[17] + F6*G[16] + F7*G[15]);
      
      // Number of operations: 14
      I[32] = W15[ip]*std::exp(F0)*(F2*G[19] + F3*G[18] + F4*G[13] + F5*G[21] + F6*G[20] + F7*G[16]);
      
      // Number of operations: 14
      I[33] = W15[ip]*std::exp(F0)*(F2*G[22] + F3*G[19] + F4*G[14] + F5*G[23] + F6*G[21] + F7*G[17]);
      
      // Number of operations: 14
      I[34] = W15[ip]*std::exp(F1)*(F10*G[26] + F2*G[1] + F3*G[25] + F4*G[24] + F8*G[4] + F9*G[27]);
      
      // Number of operations: 14
      I[35] = W15[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 3
      I[36] = G[30]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[37] = G[31]*W15[ip]*std::exp(F1);
      
      
      // Number of operations for primary indices: 540
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 144
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[35];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 96
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[37];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_0_3: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_0_3() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_0_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, false, true, false, true, true, false, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 224.
    double G[32];
    G[0] = det*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[1] = det*w[10][0]*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[2] = det*w[10][0]*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] = det*w[10][0]*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[4] = det*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[5] = det*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] = det*w[3][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[7] = det*w[3][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] = det*w[3][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[9] = det*w[3][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[10] = det*w[3][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[11] = det*w[3][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] = det*w[5][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[13] = det*w[5][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] = det*w[5][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[15] = det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[16] = det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] = det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[18] = det*w[5][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[19] = det*w[5][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[20] = det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[21] = det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[22] = det*w[5][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] = det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] = det*w[10][0]*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] = det*w[10][0]*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] = det*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] = det*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] = det*w[10][0]*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] = det*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] =  - det*w[7][0];
    G[31] =  - det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 15000
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 168
      double I[38];
      // Number of operations: 3
      I[0] = G[0]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[1] = G[1]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[2] = G[2]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[3] = G[3]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[4] = G[4]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[5] = G[5]*W15[ip]*std::exp(F1);
      
      // Number of operations: 1
      I[6] = G[6]*W15[ip];
      
      // Number of operations: 1
      I[7] = G[7]*W15[ip];
      
      // Number of operations: 1
      I[8] = G[8]*W15[ip];
      
      // Number of operations: 1
      I[9] = G[9]*W15[ip];
      
      // Number of operations: 1
      I[10] = G[10]*W15[ip];
      
      // Number of operations: 1
      I[11] = G[11]*W15[ip];
      
      // Number of operations: 3
      I[12] = G[12]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[13] = G[13]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[14] = G[14]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[15] = G[15]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[16] = G[16]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[17] = G[17]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[18] = G[18]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[19] = G[19]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[20] = G[20]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[21] = G[21]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[22] = G[22]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[23] = G[23]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[24] = G[24]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[25] = G[25]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[26] = G[26]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[27] = G[27]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[28] = G[28]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[29] = G[29]*W15[ip]*std::exp(F1);
      
      // Number of operations: 14
      I[30] = W15[ip]*std::exp(F1)*(F10*G[4] + F2*G[3] + F3*G[2] + F4*G[1] + F8*G[0] + F9*G[5]);
      
      // Number of operations: 14
      I[31] = W15[ip]*std::exp(F0)*(F2*G[14] + F3*G[13] + F4*G[12] + F5*G[17] + F6*G[16] + F7*G[15]);
      
      // Number of operations: 14
      I[32] = W15[ip]*std::exp(F0)*(F2*G[19] + F3*G[18] + F4*G[13] + F5*G[21] + F6*G[20] + F7*G[16]);
      
      // Number of operations: 14
      I[33] = W15[ip]*std::exp(F0)*(F2*G[22] + F3*G[19] + F4*G[14] + F5*G[23] + F6*G[21] + F7*G[17]);
      
      // Number of operations: 14
      I[34] = W15[ip]*std::exp(F1)*(F10*G[26] + F2*G[1] + F3*G[25] + F4*G[24] + F8*G[4] + F9*G[27]);
      
      // Number of operations: 14
      I[35] = W15[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 3
      I[36] = G[30]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[37] = G[31]*W15[ip]*std::exp(F1);
      
      
      // Number of operations for primary indices: 540
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc12[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc13[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc14[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc4[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc5[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc6[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc10[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc12[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc13[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc14[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc8[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc9[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 144
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc10[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[30];
          // Number of operations to compute entry: 3
          A[nzc4[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[31];
          // Number of operations to compute entry: 3
          A[nzc5[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[32];
          // Number of operations to compute entry: 3
          A[nzc6[j]*12 + nzc3[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[33];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[34];
          // Number of operations to compute entry: 3
          A[nzc9[j]*12 + nzc7[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[35];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 96
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc3[k]] += FE0[ip][j]*FE0[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc11[j]*12 + nzc7[k]] += FE0[ip][j]*FE0[ip][k]*I[37];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, false, false, false, false, false, true, false, false, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 2.
    double G[2];
    G[0] =  - det*w[7][0];
    G[1] =  - det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 1770
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 6
      double I[2];
      // Number of operations: 3
      I[0] = G[0]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[1] = G[1]*W15[ip]*std::exp(F1);
      
      
      // Number of operations for primary indices: 96
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc0[k]] += FE0[ip][j]*FE0[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc8[j]*12 + nzc4[k]] += FE0[ip][j]*FE0[ip][k]*I[1];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class mosfet_interior_facet_integral_0_3: public ufc::interior_facet_integral
{
public:

  /// Constructor
  mosfet_interior_facet_integral_0_3() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_interior_facet_integral_0_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, false, false, false, false, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      61
    // Number of operations (multiply-add pairs) for geometry tensor:    1
    // Number of operations (multiply-add pairs) for tensor contraction: 72
    // Total number of operations (multiply-add pairs):                  134
    
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    
    // Compute geometry tensor
    const double G0_1 = det*w[11][1]*(1.0);
    
    // Compute element tensor
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0;
        A[501] = 0.0;
        A[502] = 0.0;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666667*G0_1;
        A[527] = 0.0416666666666667*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0416666666666667*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0416666666666667*G0_1;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0;
        A[526] = 0.0;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333333*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0;
        A[527] = 0.0416666666666666*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0;
        A[550] = 0.0;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0416666666666666*G0_1;
        A[574] = 0.0;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666666*G0_1;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0416666666666666*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0;
        A[574] = 0.0;
        A[575] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0;
        A[501] = 0.0;
        A[502] = 0.0;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666667*G0_1;
        A[527] = 0.0416666666666667*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0416666666666667*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0416666666666667*G0_1;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0;
        A[526] = 0.0;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333333*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0;
        A[527] = 0.0416666666666666*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0;
        A[550] = 0.0;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0416666666666666*G0_1;
        A[574] = 0.0;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666666*G0_1;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0416666666666666*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0;
        A[574] = 0.0;
        A[575] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0;
        A[501] = 0.0;
        A[502] = 0.0;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666667*G0_1;
        A[527] = 0.0416666666666667*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0416666666666667*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0416666666666667*G0_1;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0;
        A[526] = 0.0;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333333*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0;
        A[527] = 0.0416666666666666*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0;
        A[550] = 0.0;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0416666666666666*G0_1;
        A[574] = 0.0;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666666*G0_1;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0416666666666666*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0;
        A[574] = 0.0;
        A[575] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0;
        A[501] = 0.0;
        A[502] = 0.0;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666667*G0_1;
        A[527] = 0.0416666666666667*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0416666666666667*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0416666666666667*G0_1;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0;
        A[525] = 0.0;
        A[526] = 0.0;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0416666666666667*G0_1;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0;
        A[574] = 0.0416666666666666*G0_1;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333333*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0;
        A[503] = 0.0416666666666667*G0_1;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0;
        A[527] = 0.0416666666666666*G0_1;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0;
        A[549] = 0.0;
        A[550] = 0.0;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0416666666666667*G0_1;
        A[573] = 0.0416666666666666*G0_1;
        A[574] = 0.0;
        A[575] = 0.0833333333333333*G0_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = 0.0;
        A[22] = 0.0;
        A[23] = 0.0;
        A[24] = 0.0;
        A[25] = 0.0;
        A[26] = 0.0;
        A[27] = 0.0;
        A[28] = 0.0;
        A[29] = 0.0;
        A[30] = 0.0;
        A[31] = 0.0;
        A[32] = 0.0;
        A[33] = 0.0;
        A[34] = 0.0;
        A[35] = 0.0;
        A[36] = 0.0;
        A[37] = 0.0;
        A[38] = 0.0;
        A[39] = 0.0;
        A[40] = 0.0;
        A[41] = 0.0;
        A[42] = 0.0;
        A[43] = 0.0;
        A[44] = 0.0;
        A[45] = 0.0;
        A[46] = 0.0;
        A[47] = 0.0;
        A[48] = 0.0;
        A[49] = 0.0;
        A[50] = 0.0;
        A[51] = 0.0;
        A[52] = 0.0;
        A[53] = 0.0;
        A[54] = 0.0;
        A[55] = 0.0;
        A[56] = 0.0;
        A[57] = 0.0;
        A[58] = 0.0;
        A[59] = 0.0;
        A[60] = 0.0;
        A[61] = 0.0;
        A[62] = 0.0;
        A[63] = 0.0;
        A[64] = 0.0;
        A[65] = 0.0;
        A[66] = 0.0;
        A[67] = 0.0;
        A[68] = 0.0;
        A[69] = 0.0;
        A[70] = 0.0;
        A[71] = 0.0;
        A[72] = 0.0;
        A[73] = 0.0;
        A[74] = 0.0;
        A[75] = 0.0;
        A[76] = 0.0;
        A[77] = 0.0;
        A[78] = 0.0;
        A[79] = 0.0;
        A[80] = 0.0;
        A[81] = 0.0;
        A[82] = 0.0;
        A[83] = 0.0;
        A[84] = 0.0;
        A[85] = 0.0;
        A[86] = 0.0;
        A[87] = 0.0;
        A[88] = 0.0;
        A[89] = 0.0;
        A[90] = 0.0;
        A[91] = 0.0;
        A[92] = 0.0;
        A[93] = 0.0;
        A[94] = 0.0;
        A[95] = 0.0;
        A[96] = 0.0;
        A[97] = 0.0;
        A[98] = 0.0;
        A[99] = 0.0;
        A[100] = 0.0;
        A[101] = 0.0;
        A[102] = 0.0;
        A[103] = 0.0;
        A[104] = 0.0;
        A[105] = 0.0;
        A[106] = 0.0;
        A[107] = 0.0;
        A[108] = 0.0;
        A[109] = 0.0;
        A[110] = 0.0;
        A[111] = 0.0;
        A[112] = 0.0;
        A[113] = 0.0;
        A[114] = 0.0;
        A[115] = 0.0;
        A[116] = 0.0;
        A[117] = 0.0;
        A[118] = 0.0;
        A[119] = 0.0;
        A[120] = 0.0;
        A[121] = 0.0;
        A[122] = 0.0;
        A[123] = 0.0;
        A[124] = 0.0;
        A[125] = 0.0;
        A[126] = 0.0;
        A[127] = 0.0;
        A[128] = 0.0;
        A[129] = 0.0;
        A[130] = 0.0;
        A[131] = 0.0;
        A[132] = 0.0;
        A[133] = 0.0;
        A[134] = 0.0;
        A[135] = 0.0;
        A[136] = 0.0;
        A[137] = 0.0;
        A[138] = 0.0;
        A[139] = 0.0;
        A[140] = 0.0;
        A[141] = 0.0;
        A[142] = 0.0;
        A[143] = 0.0;
        A[144] = 0.0;
        A[145] = 0.0;
        A[146] = 0.0;
        A[147] = 0.0;
        A[148] = 0.0;
        A[149] = 0.0;
        A[150] = 0.0;
        A[151] = 0.0;
        A[152] = 0.0;
        A[153] = 0.0;
        A[154] = 0.0;
        A[155] = 0.0;
        A[156] = 0.0;
        A[157] = 0.0;
        A[158] = 0.0;
        A[159] = 0.0;
        A[160] = 0.0;
        A[161] = 0.0;
        A[162] = 0.0;
        A[163] = 0.0;
        A[164] = 0.0;
        A[165] = 0.0;
        A[166] = 0.0;
        A[167] = 0.0;
        A[168] = 0.0;
        A[169] = 0.0;
        A[170] = 0.0;
        A[171] = 0.0;
        A[172] = 0.0;
        A[173] = 0.0;
        A[174] = 0.0;
        A[175] = 0.0;
        A[176] = 0.0;
        A[177] = 0.0;
        A[178] = 0.0;
        A[179] = 0.0;
        A[180] = 0.0;
        A[181] = 0.0;
        A[182] = 0.0;
        A[183] = 0.0;
        A[184] = 0.0;
        A[185] = 0.0;
        A[186] = 0.0;
        A[187] = 0.0;
        A[188] = 0.0;
        A[189] = 0.0;
        A[190] = 0.0;
        A[191] = 0.0;
        A[192] = 0.0;
        A[193] = 0.0;
        A[194] = 0.0;
        A[195] = 0.0;
        A[196] = 0.0;
        A[197] = 0.0;
        A[198] = 0.0;
        A[199] = 0.0;
        A[200] = 0.0;
        A[201] = 0.0;
        A[202] = 0.0;
        A[203] = 0.0;
        A[204] = 0.0;
        A[205] = 0.0;
        A[206] = 0.0;
        A[207] = 0.0;
        A[208] = 0.0;
        A[209] = 0.0;
        A[210] = 0.0;
        A[211] = 0.0;
        A[212] = 0.0;
        A[213] = 0.0;
        A[214] = 0.0;
        A[215] = 0.0;
        A[216] = 0.0;
        A[217] = 0.0;
        A[218] = 0.0;
        A[219] = 0.0;
        A[220] = 0.0;
        A[221] = 0.0;
        A[222] = 0.0;
        A[223] = 0.0;
        A[224] = 0.0;
        A[225] = 0.0;
        A[226] = 0.0;
        A[227] = 0.0;
        A[228] = 0.0;
        A[229] = 0.0;
        A[230] = 0.0;
        A[231] = 0.0;
        A[232] = 0.0;
        A[233] = 0.0;
        A[234] = 0.0;
        A[235] = 0.0;
        A[236] = 0.0;
        A[237] = 0.0;
        A[238] = 0.0;
        A[239] = 0.0;
        A[240] = 0.0;
        A[241] = 0.0;
        A[242] = 0.0;
        A[243] = 0.0;
        A[244] = 0.0;
        A[245] = 0.0;
        A[246] = 0.0;
        A[247] = 0.0;
        A[248] = 0.0;
        A[249] = 0.0;
        A[250] = 0.0;
        A[251] = 0.0;
        A[252] = 0.0;
        A[253] = 0.0;
        A[254] = 0.0;
        A[255] = 0.0;
        A[256] = 0.0;
        A[257] = 0.0;
        A[258] = 0.0;
        A[259] = 0.0;
        A[260] = 0.0;
        A[261] = 0.0;
        A[262] = 0.0;
        A[263] = 0.0;
        A[264] = 0.0;
        A[265] = 0.0;
        A[266] = 0.0;
        A[267] = 0.0;
        A[268] = 0.0;
        A[269] = 0.0;
        A[270] = 0.0;
        A[271] = 0.0;
        A[272] = 0.0;
        A[273] = 0.0;
        A[274] = 0.0;
        A[275] = 0.0;
        A[276] = 0.0;
        A[277] = 0.0;
        A[278] = 0.0;
        A[279] = 0.0;
        A[280] = 0.0;
        A[281] = 0.0;
        A[282] = 0.0;
        A[283] = 0.0;
        A[284] = 0.0;
        A[285] = 0.0;
        A[286] = 0.0;
        A[287] = 0.0;
        A[288] = 0.0;
        A[289] = 0.0;
        A[290] = 0.0;
        A[291] = 0.0;
        A[292] = 0.0;
        A[293] = 0.0;
        A[294] = 0.0;
        A[295] = 0.0;
        A[296] = 0.0;
        A[297] = 0.0;
        A[298] = 0.0;
        A[299] = 0.0;
        A[300] = 0.0;
        A[301] = 0.0;
        A[302] = 0.0;
        A[303] = 0.0;
        A[304] = 0.0;
        A[305] = 0.0;
        A[306] = 0.0;
        A[307] = 0.0;
        A[308] = 0.0;
        A[309] = 0.0;
        A[310] = 0.0;
        A[311] = 0.0;
        A[312] = 0.0;
        A[313] = 0.0;
        A[314] = 0.0;
        A[315] = 0.0;
        A[316] = 0.0;
        A[317] = 0.0;
        A[318] = 0.0;
        A[319] = 0.0;
        A[320] = 0.0;
        A[321] = 0.0;
        A[322] = 0.0;
        A[323] = 0.0;
        A[324] = 0.0;
        A[325] = 0.0;
        A[326] = 0.0;
        A[327] = 0.0;
        A[328] = 0.0;
        A[329] = 0.0;
        A[330] = 0.0;
        A[331] = 0.0;
        A[332] = 0.0;
        A[333] = 0.0;
        A[334] = 0.0;
        A[335] = 0.0;
        A[336] = 0.0;
        A[337] = 0.0;
        A[338] = 0.0;
        A[339] = 0.0;
        A[340] = 0.0;
        A[341] = 0.0;
        A[342] = 0.0;
        A[343] = 0.0;
        A[344] = 0.0;
        A[345] = 0.0;
        A[346] = 0.0;
        A[347] = 0.0;
        A[348] = 0.0;
        A[349] = 0.0;
        A[350] = 0.0;
        A[351] = 0.0;
        A[352] = 0.0;
        A[353] = 0.0;
        A[354] = 0.0;
        A[355] = 0.0;
        A[356] = 0.0;
        A[357] = 0.0;
        A[358] = 0.0;
        A[359] = 0.0;
        A[360] = 0.0;
        A[361] = 0.0;
        A[362] = 0.0;
        A[363] = 0.0;
        A[364] = 0.0;
        A[365] = 0.0;
        A[366] = 0.0;
        A[367] = 0.0;
        A[368] = 0.0;
        A[369] = 0.0;
        A[370] = 0.0;
        A[371] = 0.0;
        A[372] = 0.0;
        A[373] = 0.0;
        A[374] = 0.0;
        A[375] = 0.0;
        A[376] = 0.0;
        A[377] = 0.0;
        A[378] = 0.0;
        A[379] = 0.0;
        A[380] = 0.0;
        A[381] = 0.0;
        A[382] = 0.0;
        A[383] = 0.0;
        A[384] = 0.0;
        A[385] = 0.0;
        A[386] = 0.0;
        A[387] = 0.0;
        A[388] = 0.0;
        A[389] = 0.0;
        A[390] = 0.0;
        A[391] = 0.0;
        A[392] = 0.0;
        A[393] = 0.0;
        A[394] = 0.0;
        A[395] = 0.0;
        A[396] = 0.0;
        A[397] = 0.0;
        A[398] = 0.0;
        A[399] = 0.0;
        A[400] = 0.0;
        A[401] = 0.0;
        A[402] = 0.0;
        A[403] = 0.0;
        A[404] = 0.0;
        A[405] = 0.0;
        A[406] = 0.0;
        A[407] = 0.0;
        A[408] = 0.0;
        A[409] = 0.0;
        A[410] = 0.0;
        A[411] = 0.0;
        A[412] = 0.0;
        A[413] = 0.0;
        A[414] = 0.0;
        A[415] = 0.0;
        A[416] = 0.0;
        A[417] = 0.0;
        A[418] = 0.0;
        A[419] = 0.0;
        A[420] = 0.0;
        A[421] = 0.0;
        A[422] = 0.0;
        A[423] = 0.0;
        A[424] = 0.0;
        A[425] = 0.0;
        A[426] = 0.0;
        A[427] = 0.0;
        A[428] = 0.0;
        A[429] = 0.0;
        A[430] = 0.0;
        A[431] = 0.0;
        A[432] = 0.0;
        A[433] = 0.0;
        A[434] = 0.0;
        A[435] = 0.0;
        A[436] = 0.0;
        A[437] = 0.0;
        A[438] = 0.0;
        A[439] = 0.0;
        A[440] = 0.0;
        A[441] = 0.0;
        A[442] = 0.0;
        A[443] = 0.0;
        A[444] = 0.0;
        A[445] = 0.0;
        A[446] = 0.0;
        A[447] = 0.0;
        A[448] = 0.0;
        A[449] = 0.0;
        A[450] = 0.0;
        A[451] = 0.0;
        A[452] = 0.0;
        A[453] = 0.0;
        A[454] = 0.0;
        A[455] = 0.0;
        A[456] = 0.0;
        A[457] = 0.0;
        A[458] = 0.0;
        A[459] = 0.0;
        A[460] = 0.0;
        A[461] = 0.0;
        A[462] = 0.0;
        A[463] = 0.0;
        A[464] = 0.0;
        A[465] = 0.0;
        A[466] = 0.0;
        A[467] = 0.0;
        A[468] = 0.0;
        A[469] = 0.0;
        A[470] = 0.0;
        A[471] = 0.0;
        A[472] = 0.0;
        A[473] = 0.0;
        A[474] = 0.0;
        A[475] = 0.0;
        A[476] = 0.0;
        A[477] = 0.0;
        A[478] = 0.0;
        A[479] = 0.0;
        A[480] = 0.0;
        A[481] = 0.0;
        A[482] = 0.0;
        A[483] = 0.0;
        A[484] = 0.0;
        A[485] = 0.0;
        A[486] = 0.0;
        A[487] = 0.0;
        A[488] = 0.0;
        A[489] = 0.0;
        A[490] = 0.0;
        A[491] = 0.0;
        A[492] = 0.0;
        A[493] = 0.0;
        A[494] = 0.0;
        A[495] = 0.0;
        A[496] = 0.0;
        A[497] = 0.0;
        A[498] = 0.0;
        A[499] = 0.0;
        A[500] = 0.0833333333333334*G0_1;
        A[501] = 0.0416666666666667*G0_1;
        A[502] = 0.0416666666666667*G0_1;
        A[503] = 0.0;
        A[504] = 0.0;
        A[505] = 0.0;
        A[506] = 0.0;
        A[507] = 0.0;
        A[508] = 0.0;
        A[509] = 0.0;
        A[510] = 0.0;
        A[511] = 0.0;
        A[512] = 0.0;
        A[513] = 0.0;
        A[514] = 0.0;
        A[515] = 0.0;
        A[516] = 0.0;
        A[517] = 0.0;
        A[518] = 0.0;
        A[519] = 0.0;
        A[520] = 0.0;
        A[521] = 0.0;
        A[522] = 0.0;
        A[523] = 0.0;
        A[524] = 0.0416666666666667*G0_1;
        A[525] = 0.0833333333333333*G0_1;
        A[526] = 0.0416666666666666*G0_1;
        A[527] = 0.0;
        A[528] = 0.0;
        A[529] = 0.0;
        A[530] = 0.0;
        A[531] = 0.0;
        A[532] = 0.0;
        A[533] = 0.0;
        A[534] = 0.0;
        A[535] = 0.0;
        A[536] = 0.0;
        A[537] = 0.0;
        A[538] = 0.0;
        A[539] = 0.0;
        A[540] = 0.0;
        A[541] = 0.0;
        A[542] = 0.0;
        A[543] = 0.0;
        A[544] = 0.0;
        A[545] = 0.0;
        A[546] = 0.0;
        A[547] = 0.0;
        A[548] = 0.0416666666666667*G0_1;
        A[549] = 0.0416666666666666*G0_1;
        A[550] = 0.0833333333333333*G0_1;
        A[551] = 0.0;
        A[552] = 0.0;
        A[553] = 0.0;
        A[554] = 0.0;
        A[555] = 0.0;
        A[556] = 0.0;
        A[557] = 0.0;
        A[558] = 0.0;
        A[559] = 0.0;
        A[560] = 0.0;
        A[561] = 0.0;
        A[562] = 0.0;
        A[563] = 0.0;
        A[564] = 0.0;
        A[565] = 0.0;
        A[566] = 0.0;
        A[567] = 0.0;
        A[568] = 0.0;
        A[569] = 0.0;
        A[570] = 0.0;
        A[571] = 0.0;
        A[572] = 0.0;
        A[573] = 0.0;
        A[574] = 0.0;
        A[575] = 0.0;
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_1_1: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_1_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_1_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, false, true, false, true, true, false, true, true, false, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Values of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 225.
    double G[33];
    G[0] =  - det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[2] =  - det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] =  - det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[4] =  - det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[5] =  - det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] =  - det*w[4][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[7] =  - det*w[4][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] =  - det*w[4][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[9] =  - det*w[4][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[10] =  - det*w[4][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[11] =  - det*w[4][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] =  - det*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[13] =  - det*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] =  - det*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[15] =  - det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[16] =  - det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] =  - det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[18] =  - det*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[19] =  - det*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[20] =  - det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[21] =  - det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[22] =  - det*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] =  - det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] =  - det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] =  - det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] =  - det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] =  - det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] =  - det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] =  - det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] = det*w[12][0];
    G[31] = det*w[7][0];
    G[32] = det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 2870
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 109
      double I[10];
      // Number of operations: 14
      I[0] = W14[ip]*std::exp(F1)*(F10*G[0] + F2*G[1] + F3*G[2] + F4*G[3] + F8*G[4] + F9*G[5]);
      
      // Number of operations: 6
      I[1] = W14[ip]*(F2*G[6] + F3*G[7] + F4*G[8]);
      
      // Number of operations: 6
      I[2] = W14[ip]*(F2*G[9] + F3*G[10] + F4*G[7]);
      
      // Number of operations: 6
      I[3] = W14[ip]*(F2*G[11] + F3*G[9] + F4*G[6]);
      
      // Number of operations: 14
      I[4] = W14[ip]*std::exp(F0)*(F2*G[12] + F3*G[13] + F4*G[14] + F5*G[15] + F6*G[16] + F7*G[17]);
      
      // Number of operations: 14
      I[5] = W14[ip]*std::exp(F0)*(F2*G[18] + F3*G[19] + F4*G[13] + F5*G[20] + F6*G[21] + F7*G[16]);
      
      // Number of operations: 14
      I[6] = W14[ip]*std::exp(F0)*(F2*G[22] + F3*G[18] + F4*G[12] + F5*G[23] + F6*G[20] + F7*G[15]);
      
      // Number of operations: 14
      I[7] = W14[ip]*std::exp(F1)*(F10*G[24] + F2*G[3] + F3*G[25] + F4*G[26] + F8*G[0] + F9*G[27]);
      
      // Number of operations: 14
      I[8] = W14[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 7
      I[9] = W14[ip]*(G[30] + G[31]*std::exp(F0) + G[32]*std::exp(F1));
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_1_2: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_1_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_1_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, false, true, false, true, true, false, true, true, false, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Values of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 225.
    double G[33];
    G[0] =  - det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[2] =  - det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] =  - det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[4] =  - det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[5] =  - det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] =  - det*w[4][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[7] =  - det*w[4][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] =  - det*w[4][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[9] =  - det*w[4][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[10] =  - det*w[4][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[11] =  - det*w[4][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] =  - det*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[13] =  - det*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] =  - det*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[15] =  - det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[16] =  - det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] =  - det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[18] =  - det*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[19] =  - det*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[20] =  - det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[21] =  - det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[22] =  - det*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] =  - det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] =  - det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] =  - det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] =  - det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] =  - det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] =  - det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] =  - det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] = det*w[12][0];
    G[31] = det*w[7][0];
    G[32] = det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 2870
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 109
      double I[10];
      // Number of operations: 14
      I[0] = W14[ip]*std::exp(F1)*(F10*G[0] + F2*G[1] + F3*G[2] + F4*G[3] + F8*G[4] + F9*G[5]);
      
      // Number of operations: 6
      I[1] = W14[ip]*(F2*G[6] + F3*G[7] + F4*G[8]);
      
      // Number of operations: 6
      I[2] = W14[ip]*(F2*G[9] + F3*G[10] + F4*G[7]);
      
      // Number of operations: 6
      I[3] = W14[ip]*(F2*G[11] + F3*G[9] + F4*G[6]);
      
      // Number of operations: 14
      I[4] = W14[ip]*std::exp(F0)*(F2*G[12] + F3*G[13] + F4*G[14] + F5*G[15] + F6*G[16] + F7*G[17]);
      
      // Number of operations: 14
      I[5] = W14[ip]*std::exp(F0)*(F2*G[18] + F3*G[19] + F4*G[13] + F5*G[20] + F6*G[21] + F7*G[16]);
      
      // Number of operations: 14
      I[6] = W14[ip]*std::exp(F0)*(F2*G[22] + F3*G[18] + F4*G[12] + F5*G[23] + F6*G[20] + F7*G[15]);
      
      // Number of operations: 14
      I[7] = W14[ip]*std::exp(F1)*(F10*G[24] + F2*G[3] + F3*G[25] + F4*G[26] + F8*G[0] + F9*G[27]);
      
      // Number of operations: 14
      I[8] = W14[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 7
      I[9] = W14[ip]*(G[30] + G[31]*std::exp(F0) + G[32]*std::exp(F1));
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_1_3: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_1_3() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_1_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, false, true, false, true, true, false, true, true, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Values of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc11[4] = {8, 9, 10, 11};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 225.
    double G[33];
    G[0] =  - det*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - det*w[10][0]*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[2] =  - det*w[10][0]*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] =  - det*w[10][0]*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[4] =  - det*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[5] =  - det*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] =  - det*w[3][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[7] =  - det*w[3][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[8] =  - det*w[3][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[9] =  - det*w[3][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[10] =  - det*w[3][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[11] =  - det*w[3][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] =  - det*w[5][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[13] =  - det*w[5][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] =  - det*w[5][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[15] =  - det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[16] =  - det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] =  - det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[18] =  - det*w[5][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[19] =  - det*w[5][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[20] =  - det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[21] =  - det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[22] =  - det*w[5][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] =  - det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] =  - det*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] =  - det*w[10][0]*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] =  - det*w[10][0]*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] =  - det*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[28] =  - det*w[10][0]*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[29] =  - det*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[30] = det*w[11][0];
    G[31] = det*w[7][0];
    G[32] = det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 2870
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      
      // Total number of operations to compute function values = 36
      for (unsigned int r = 0; r < 2; r++)
      {
        F2 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F3 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F4 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F5 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F6 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F8 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F9 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 109
      double I[10];
      // Number of operations: 14
      I[0] = W14[ip]*std::exp(F1)*(F10*G[0] + F2*G[1] + F3*G[2] + F4*G[3] + F8*G[4] + F9*G[5]);
      
      // Number of operations: 6
      I[1] = W14[ip]*(F2*G[6] + F3*G[7] + F4*G[8]);
      
      // Number of operations: 6
      I[2] = W14[ip]*(F2*G[9] + F3*G[10] + F4*G[7]);
      
      // Number of operations: 6
      I[3] = W14[ip]*(F2*G[11] + F3*G[9] + F4*G[6]);
      
      // Number of operations: 14
      I[4] = W14[ip]*std::exp(F0)*(F2*G[12] + F3*G[13] + F4*G[14] + F5*G[15] + F6*G[16] + F7*G[17]);
      
      // Number of operations: 14
      I[5] = W14[ip]*std::exp(F0)*(F2*G[18] + F3*G[19] + F4*G[13] + F5*G[20] + F6*G[21] + F7*G[16]);
      
      // Number of operations: 14
      I[6] = W14[ip]*std::exp(F0)*(F2*G[22] + F3*G[18] + F4*G[12] + F5*G[23] + F6*G[20] + F7*G[15]);
      
      // Number of operations: 14
      I[7] = W14[ip]*std::exp(F1)*(F10*G[24] + F2*G[3] + F3*G[25] + F4*G[26] + F8*G[0] + F9*G[27]);
      
      // Number of operations: 14
      I[8] = W14[ip]*std::exp(F1)*(F10*G[27] + F2*G[2] + F3*G[28] + F4*G[25] + F8*G[5] + F9*G[29]);
      
      // Number of operations: 7
      I[9] = W14[ip]*(G[30] + G[31]*std::exp(F0) + G[32]*std::exp(F1));
      
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc10[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc4[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc5[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc6[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc9[j]] += FE0_D001[ip][j]*I[8];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc11[j]] += FE0[ip][j]*I[9];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mosfet_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  mosfet_cell_integral_1_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_cell_integral_1_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, false, false, false, false, false, true, false, false, true, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Values of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 12; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 2.
    double G[2];
    G[0] = det*w[7][0];
    G[1] = det*w[10][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 420
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      
      // Total number of operations to compute function values = 16
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 6
      double I[1];
      // Number of operations: 6
      I[0] = W14[ip]*(G[0]*std::exp(F0) + G[1]*std::exp(F1));
      
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc8[j]] += FE0[ip][j]*I[0];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class mosfet_interior_facet_integral_1_3: public ufc::interior_facet_integral
{
public:

  /// Constructor
  mosfet_interior_facet_integral_1_3() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_interior_facet_integral_1_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, true, false, false, false, false, false, false, false, false, false, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      61
    // Number of operations (multiply-add pairs) for geometry tensor:    6
    // Number of operations (multiply-add pairs) for tensor contraction: 120
    // Total number of operations (multiply-add pairs):                  187
    
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    
    // Compute geometry tensor
    const double G0_4_1 = det*w[2][4]*w[13][1]*(1.0);
    const double G0_5_1 = det*w[2][5]*w[13][1]*(1.0);
    const double G0_6_1 = det*w[2][6]*w[13][1]*(1.0);
    const double G0_7_1 = det*w[2][7]*w[13][1]*(1.0);
    
    // Compute element tensor
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = -0.0833333333333333*G0_5_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[22] = -0.0416666666666667*G0_5_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_5_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[21] = 0.0;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333333*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_7_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_7_1;
        A[22] = 0.0;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_6_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_6_1;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_6_1;
        A[23] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = -0.0833333333333333*G0_5_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[22] = -0.0416666666666667*G0_5_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_5_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[21] = 0.0;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333333*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_7_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_7_1;
        A[22] = 0.0;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_6_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_6_1;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_6_1;
        A[23] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = -0.0833333333333333*G0_5_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[22] = -0.0416666666666667*G0_5_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_5_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[21] = 0.0;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333333*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_7_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_7_1;
        A[22] = 0.0;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_6_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_6_1;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_6_1;
        A[23] = 0.0;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = 0.0;
        A[21] = -0.0833333333333333*G0_5_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[22] = -0.0416666666666667*G0_5_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_5_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 1:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[21] = 0.0;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_6_1 - 0.0416666666666667*G0_7_1;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_6_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 2:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333333*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_7_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_7_1;
        A[22] = 0.0;
        A[23] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_7_1;
          break;
        }
      case 3:
        {
          A[0] = 0.0;
        A[1] = 0.0;
        A[2] = 0.0;
        A[3] = 0.0;
        A[4] = 0.0;
        A[5] = 0.0;
        A[6] = 0.0;
        A[7] = 0.0;
        A[8] = 0.0;
        A[9] = 0.0;
        A[10] = 0.0;
        A[11] = 0.0;
        A[12] = 0.0;
        A[13] = 0.0;
        A[14] = 0.0;
        A[15] = 0.0;
        A[16] = 0.0;
        A[17] = 0.0;
        A[18] = 0.0;
        A[19] = 0.0;
        A[20] = -0.0833333333333334*G0_4_1 - 0.0416666666666667*G0_5_1 - 0.0416666666666667*G0_6_1;
        A[21] = -0.0416666666666667*G0_4_1 - 0.0833333333333333*G0_5_1 - 0.0416666666666666*G0_6_1;
        A[22] = -0.0416666666666667*G0_4_1 - 0.0416666666666666*G0_5_1 - 0.0833333333333333*G0_6_1;
        A[23] = 0.0;
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mosfet_form_0: public ufc::form
{
public:

  /// Constructor
  mosfet_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "43711c233a632cf4f546108f1a1a85b99c65832951014482484944ae039b7bc8ed8d397589c92b804e22f9b4519ea144ac71651c2d25b8740936e4b2fc05a726";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 12;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 4;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 4;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_finite_element_2();
        break;
      }
    case 1:
      {
        return new mosfet_finite_element_2();
        break;
      }
    case 2:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 3:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 4:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 5:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 6:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 7:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 8:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 9:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 10:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 11:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 12:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 13:
      {
        return new mosfet_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_dofmap_2();
        break;
      }
    case 1:
      {
        return new mosfet_dofmap_2();
        break;
      }
    case 2:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 3:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 4:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 5:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 6:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 7:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 8:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 9:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 10:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 11:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 12:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 13:
      {
        return new mosfet_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 1:
      {
        return new mosfet_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new mosfet_cell_integral_0_2();
        break;
      }
    case 3:
      {
        return new mosfet_cell_integral_0_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 3:
      {
        return new mosfet_interior_facet_integral_0_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new mosfet_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mosfet_form_1: public ufc::form
{
public:

  /// Constructor
  mosfet_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mosfet_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "a0032e1c679bdcd8c0fa19b52edb2ec31797eb25902fe8b1de875fd69921fee6597bccf9bf5a3422e17abdd2c503c06ad38652810e0818144309187d9cc3551f";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 14;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 4;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 4;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_finite_element_2();
        break;
      }
    case 1:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 2:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 3:
      {
        return new mosfet_finite_element_1();
        break;
      }
    case 4:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 5:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 6:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 7:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 8:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 9:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 10:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 11:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 12:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 13:
      {
        return new mosfet_finite_element_0();
        break;
      }
    case 14:
      {
        return new mosfet_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mosfet_dofmap_2();
        break;
      }
    case 1:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 2:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 3:
      {
        return new mosfet_dofmap_1();
        break;
      }
    case 4:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 5:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 6:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 7:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 8:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 9:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 10:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 11:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 12:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 13:
      {
        return new mosfet_dofmap_0();
        break;
      }
    case 14:
      {
        return new mosfet_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 1:
      {
        return new mosfet_cell_integral_1_1();
        break;
      }
    case 2:
      {
        return new mosfet_cell_integral_1_2();
        break;
      }
    case 3:
      {
        return new mosfet_cell_integral_1_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 3:
      {
        return new mosfet_interior_facet_integral_1_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new mosfet_cell_integral_1_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace mosfet
{

class CoefficientSpace_AnAn: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_AnAn(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_AnAn(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_AnAn(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_AnAn(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_CatCat: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_CatCat(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_CatCat(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_CatCat(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_CatCat(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dn_n: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dn_n(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dn_n(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dn_n(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dn_n(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dn_p: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dn_p(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dn_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dn_p(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dn_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dp_n: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dp_n(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dp_n(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dp_n(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dp_n(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dp_p: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dp_p(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dp_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dp_p(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dp_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_EsEs: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_EsEs(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_EsEs(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_EsEs(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_EsEs(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_eps_n: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_n(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_n(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_n(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_n(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_eps_p: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_p(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_p(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_fix_n: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_fix_n(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_fix_n(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_fix_n(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_fix_n(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_fix_p: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_fix_p(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_fix_p(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_fix_p(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_fix_p(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_gate: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_gate(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_gate(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_gate(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_gate(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qn: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qn(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qn(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qn(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qn(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qp: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qp(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qp(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qp(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qp(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_CatCat Form_a_FunctionSpace_2;

typedef CoefficientSpace_AnAn Form_a_FunctionSpace_3;

typedef CoefficientSpace_EsEs Form_a_FunctionSpace_4;

typedef CoefficientSpace_eps_p Form_a_FunctionSpace_5;

typedef CoefficientSpace_eps_n Form_a_FunctionSpace_6;

typedef CoefficientSpace_Dp_p Form_a_FunctionSpace_7;

typedef CoefficientSpace_Dp_n Form_a_FunctionSpace_8;

typedef CoefficientSpace_qp Form_a_FunctionSpace_9;

typedef CoefficientSpace_Dn_p Form_a_FunctionSpace_10;

typedef CoefficientSpace_Dn_n Form_a_FunctionSpace_11;

typedef CoefficientSpace_qn Form_a_FunctionSpace_12;

typedef CoefficientSpace_gate Form_a_FunctionSpace_13;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& CatCat, const dolfin::GenericFunction& AnAn, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_p, const dolfin::GenericFunction& eps_n, const dolfin::GenericFunction& Dp_p, const dolfin::GenericFunction& Dp_n, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& Dn_p, const dolfin::GenericFunction& Dn_n, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& gate):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->CatCat = CatCat;
    this->AnAn = AnAn;
    this->EsEs = EsEs;
    this->eps_p = eps_p;
    this->eps_n = eps_n;
    this->Dp_p = Dp_p;
    this->Dp_n = Dp_n;
    this->qp = qp;
    this->Dn_p = Dn_p;
    this->Dn_n = Dn_n;
    this->qn = qn;
    this->gate = gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> CatCat, std::shared_ptr<const dolfin::GenericFunction> AnAn, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_p, std::shared_ptr<const dolfin::GenericFunction> eps_n, std::shared_ptr<const dolfin::GenericFunction> Dp_p, std::shared_ptr<const dolfin::GenericFunction> Dp_n, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> Dn_p, std::shared_ptr<const dolfin::GenericFunction> Dn_n, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> gate):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->CatCat = *CatCat;
    this->AnAn = *AnAn;
    this->EsEs = *EsEs;
    this->eps_p = *eps_p;
    this->eps_n = *eps_n;
    this->Dp_p = *Dp_p;
    this->Dp_n = *Dp_n;
    this->qp = *qp;
    this->Dn_p = *Dn_p;
    this->Dn_n = *Dn_n;
    this->qn = *qn;
    this->gate = *gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& CatCat, const dolfin::GenericFunction& AnAn, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_p, const dolfin::GenericFunction& eps_n, const dolfin::GenericFunction& Dp_p, const dolfin::GenericFunction& Dp_n, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& Dn_p, const dolfin::GenericFunction& Dn_n, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& gate):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->CatCat = CatCat;
    this->AnAn = AnAn;
    this->EsEs = EsEs;
    this->eps_p = eps_p;
    this->eps_n = eps_n;
    this->Dp_p = Dp_p;
    this->Dp_n = Dp_n;
    this->qp = qp;
    this->Dn_p = Dn_p;
    this->Dn_n = Dn_n;
    this->qn = qn;
    this->gate = gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> CatCat, std::shared_ptr<const dolfin::GenericFunction> AnAn, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_p, std::shared_ptr<const dolfin::GenericFunction> eps_n, std::shared_ptr<const dolfin::GenericFunction> Dp_p, std::shared_ptr<const dolfin::GenericFunction> Dp_n, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> Dn_p, std::shared_ptr<const dolfin::GenericFunction> Dn_n, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> gate):
    dolfin::Form(2, 12), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), gate(*this, 11)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->CatCat = *CatCat;
    this->AnAn = *AnAn;
    this->EsEs = *EsEs;
    this->eps_p = *eps_p;
    this->eps_n = *eps_n;
    this->Dp_p = *Dp_p;
    this->Dp_n = *Dp_n;
    this->qp = *qp;
    this->Dn_p = *Dn_p;
    this->Dn_n = *Dn_n;
    this->qn = *qn;
    this->gate = *gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_0());
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "CatCat")
      return 0;
    else if (name == "AnAn")
      return 1;
    else if (name == "EsEs")
      return 2;
    else if (name == "eps_p")
      return 3;
    else if (name == "eps_n")
      return 4;
    else if (name == "Dp_p")
      return 5;
    else if (name == "Dp_n")
      return 6;
    else if (name == "qp")
      return 7;
    else if (name == "Dn_p")
      return 8;
    else if (name == "Dn_n")
      return 9;
    else if (name == "qn")
      return 10;
    else if (name == "gate")
      return 11;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "CatCat";
    case 1:
      return "AnAn";
    case 2:
      return "EsEs";
    case 3:
      return "eps_p";
    case 4:
      return "eps_n";
    case 5:
      return "Dp_p";
    case 6:
      return "Dp_n";
    case 7:
      return "qp";
    case 8:
      return "Dn_p";
    case 9:
      return "Dn_n";
    case 10:
      return "qn";
    case 11:
      return "gate";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_CatCat;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_AnAn;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_EsEs;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_eps_p;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_eps_n;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_Dp_p;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_Dp_n;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_qp;
  typedef Form_a_FunctionSpace_10 CoefficientSpace_Dn_p;
  typedef Form_a_FunctionSpace_11 CoefficientSpace_Dn_n;
  typedef Form_a_FunctionSpace_12 CoefficientSpace_qn;
  typedef Form_a_FunctionSpace_13 CoefficientSpace_gate;

  // Coefficients
  dolfin::CoefficientAssigner CatCat;
  dolfin::CoefficientAssigner AnAn;
  dolfin::CoefficientAssigner EsEs;
  dolfin::CoefficientAssigner eps_p;
  dolfin::CoefficientAssigner eps_n;
  dolfin::CoefficientAssigner Dp_p;
  dolfin::CoefficientAssigner Dp_n;
  dolfin::CoefficientAssigner qp;
  dolfin::CoefficientAssigner Dn_p;
  dolfin::CoefficientAssigner Dn_n;
  dolfin::CoefficientAssigner qn;
  dolfin::CoefficientAssigner gate;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new mosfet_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new mosfet_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_CatCat Form_L_FunctionSpace_1;

typedef CoefficientSpace_AnAn Form_L_FunctionSpace_2;

typedef CoefficientSpace_EsEs Form_L_FunctionSpace_3;

typedef CoefficientSpace_eps_p Form_L_FunctionSpace_4;

typedef CoefficientSpace_eps_n Form_L_FunctionSpace_5;

typedef CoefficientSpace_Dp_p Form_L_FunctionSpace_6;

typedef CoefficientSpace_Dp_n Form_L_FunctionSpace_7;

typedef CoefficientSpace_qp Form_L_FunctionSpace_8;

typedef CoefficientSpace_Dn_p Form_L_FunctionSpace_9;

typedef CoefficientSpace_Dn_n Form_L_FunctionSpace_10;

typedef CoefficientSpace_qn Form_L_FunctionSpace_11;

typedef CoefficientSpace_fix_p Form_L_FunctionSpace_12;

typedef CoefficientSpace_fix_n Form_L_FunctionSpace_13;

typedef CoefficientSpace_gate Form_L_FunctionSpace_14;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& CatCat, const dolfin::GenericFunction& AnAn, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_p, const dolfin::GenericFunction& eps_n, const dolfin::GenericFunction& Dp_p, const dolfin::GenericFunction& Dp_n, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& Dn_p, const dolfin::GenericFunction& Dn_n, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& fix_p, const dolfin::GenericFunction& fix_n, const dolfin::GenericFunction& gate):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->CatCat = CatCat;
    this->AnAn = AnAn;
    this->EsEs = EsEs;
    this->eps_p = eps_p;
    this->eps_n = eps_n;
    this->Dp_p = Dp_p;
    this->Dp_n = Dp_n;
    this->qp = qp;
    this->Dn_p = Dn_p;
    this->Dn_n = Dn_n;
    this->qn = qn;
    this->fix_p = fix_p;
    this->fix_n = fix_n;
    this->gate = gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> CatCat, std::shared_ptr<const dolfin::GenericFunction> AnAn, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_p, std::shared_ptr<const dolfin::GenericFunction> eps_n, std::shared_ptr<const dolfin::GenericFunction> Dp_p, std::shared_ptr<const dolfin::GenericFunction> Dp_n, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> Dn_p, std::shared_ptr<const dolfin::GenericFunction> Dn_n, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> fix_p, std::shared_ptr<const dolfin::GenericFunction> fix_n, std::shared_ptr<const dolfin::GenericFunction> gate):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->CatCat = *CatCat;
    this->AnAn = *AnAn;
    this->EsEs = *EsEs;
    this->eps_p = *eps_p;
    this->eps_n = *eps_n;
    this->Dp_p = *Dp_p;
    this->Dp_n = *Dp_n;
    this->qp = *qp;
    this->Dn_p = *Dn_p;
    this->Dn_n = *Dn_n;
    this->qn = *qn;
    this->fix_p = *fix_p;
    this->fix_n = *fix_n;
    this->gate = *gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& CatCat, const dolfin::GenericFunction& AnAn, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_p, const dolfin::GenericFunction& eps_n, const dolfin::GenericFunction& Dp_p, const dolfin::GenericFunction& Dp_n, const dolfin::GenericFunction& qp, const dolfin::GenericFunction& Dn_p, const dolfin::GenericFunction& Dn_n, const dolfin::GenericFunction& qn, const dolfin::GenericFunction& fix_p, const dolfin::GenericFunction& fix_n, const dolfin::GenericFunction& gate):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = V0;

    this->CatCat = CatCat;
    this->AnAn = AnAn;
    this->EsEs = EsEs;
    this->eps_p = eps_p;
    this->eps_n = eps_n;
    this->Dp_p = Dp_p;
    this->Dp_n = Dp_n;
    this->qp = qp;
    this->Dn_p = Dn_p;
    this->Dn_n = Dn_n;
    this->qn = qn;
    this->fix_p = fix_p;
    this->fix_n = fix_n;
    this->gate = gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> CatCat, std::shared_ptr<const dolfin::GenericFunction> AnAn, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_p, std::shared_ptr<const dolfin::GenericFunction> eps_n, std::shared_ptr<const dolfin::GenericFunction> Dp_p, std::shared_ptr<const dolfin::GenericFunction> Dp_n, std::shared_ptr<const dolfin::GenericFunction> qp, std::shared_ptr<const dolfin::GenericFunction> Dn_p, std::shared_ptr<const dolfin::GenericFunction> Dn_n, std::shared_ptr<const dolfin::GenericFunction> qn, std::shared_ptr<const dolfin::GenericFunction> fix_p, std::shared_ptr<const dolfin::GenericFunction> fix_n, std::shared_ptr<const dolfin::GenericFunction> gate):
    dolfin::Form(1, 14), CatCat(*this, 0), AnAn(*this, 1), EsEs(*this, 2), eps_p(*this, 3), eps_n(*this, 4), Dp_p(*this, 5), Dp_n(*this, 6), qp(*this, 7), Dn_p(*this, 8), Dn_n(*this, 9), qn(*this, 10), fix_p(*this, 11), fix_n(*this, 12), gate(*this, 13)
  {
    _function_spaces[0] = V0;

    this->CatCat = *CatCat;
    this->AnAn = *AnAn;
    this->EsEs = *EsEs;
    this->eps_p = *eps_p;
    this->eps_n = *eps_n;
    this->Dp_p = *Dp_p;
    this->Dp_n = *Dp_n;
    this->qp = *qp;
    this->Dn_p = *Dn_p;
    this->Dn_n = *Dn_n;
    this->qn = *qn;
    this->fix_p = *fix_p;
    this->fix_n = *fix_n;
    this->gate = *gate;

    _ufc_form = std::shared_ptr<const ufc::form>(new mosfet_form_1());
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "CatCat")
      return 0;
    else if (name == "AnAn")
      return 1;
    else if (name == "EsEs")
      return 2;
    else if (name == "eps_p")
      return 3;
    else if (name == "eps_n")
      return 4;
    else if (name == "Dp_p")
      return 5;
    else if (name == "Dp_n")
      return 6;
    else if (name == "qp")
      return 7;
    else if (name == "Dn_p")
      return 8;
    else if (name == "Dn_n")
      return 9;
    else if (name == "qn")
      return 10;
    else if (name == "fix_p")
      return 11;
    else if (name == "fix_n")
      return 12;
    else if (name == "gate")
      return 13;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "CatCat";
    case 1:
      return "AnAn";
    case 2:
      return "EsEs";
    case 3:
      return "eps_p";
    case 4:
      return "eps_n";
    case 5:
      return "Dp_p";
    case 6:
      return "Dp_n";
    case 7:
      return "qp";
    case 8:
      return "Dn_p";
    case 9:
      return "Dn_n";
    case 10:
      return "qn";
    case 11:
      return "fix_p";
    case 12:
      return "fix_n";
    case 13:
      return "gate";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_CatCat;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_AnAn;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_EsEs;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_eps_p;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_eps_n;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_Dp_p;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_Dp_n;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_qp;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_Dn_p;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_Dn_n;
  typedef Form_L_FunctionSpace_11 CoefficientSpace_qn;
  typedef Form_L_FunctionSpace_12 CoefficientSpace_fix_p;
  typedef Form_L_FunctionSpace_13 CoefficientSpace_fix_n;
  typedef Form_L_FunctionSpace_14 CoefficientSpace_gate;

  // Coefficients
  dolfin::CoefficientAssigner CatCat;
  dolfin::CoefficientAssigner AnAn;
  dolfin::CoefficientAssigner EsEs;
  dolfin::CoefficientAssigner eps_p;
  dolfin::CoefficientAssigner eps_n;
  dolfin::CoefficientAssigner Dp_p;
  dolfin::CoefficientAssigner Dp_n;
  dolfin::CoefficientAssigner qp;
  dolfin::CoefficientAssigner Dn_p;
  dolfin::CoefficientAssigner Dn_n;
  dolfin::CoefficientAssigner qn;
  dolfin::CoefficientAssigner fix_p;
  dolfin::CoefficientAssigner fix_n;
  dolfin::CoefficientAssigner gate;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef Form_a JacobianForm;
typedef Form_L LinearForm;
typedef Form_L ResidualForm;
typedef Form_a::TestSpace FunctionSpace;

}

#endif
