// This code conforms with the UFC specification version 1.5.0
// and was automatically generated by FFC version 1.5.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __PROTEIN_FOUR_SPECIES_H
#define __PROTEIN_FOUR_SPECIES_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class protein_four_species_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  protein_four_species_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
      y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
      y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    y[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    y[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new protein_four_species_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class protein_four_species_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  protein_four_species_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new protein_four_species_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class protein_four_species_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  protein_four_species_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 5*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[4*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 20; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[15];
    for (unsigned int r = 0; r < 15; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 20; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 13:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 14:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 15:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 16:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 17:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 18:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 19:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[12] = vals[3];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[13] = vals[3];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[14] = vals[3];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[15] = vals[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[16] = vals[4];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[4];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[18] = vals[4];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[19] = vals[4];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    vertex_values[15] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[6] = dof_values[5];
    vertex_values[11] = dof_values[6];
    vertex_values[16] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[7] = dof_values[9];
    vertex_values[12] = dof_values[10];
    vertex_values[17] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[12];
    vertex_values[8] = dof_values[13];
    vertex_values[13] = dof_values[14];
    vertex_values[18] = dof_values[15];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[16];
    vertex_values[9] = dof_values[17];
    vertex_values[14] = dof_values[18];
    vertex_values[19] = dof_values[19];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 5;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 1:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new protein_four_species_finite_element_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class protein_four_species_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  protein_four_species_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Real', Domain(Cell('tetrahedron', 3)), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 1;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = 0;
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = 0.25*vertex_coordinates[0] + 0.25*vertex_coordinates[3] + 0.25*vertex_coordinates[6] + 0.25*vertex_coordinates[9];
    dof_coordinates[1] = 0.25*vertex_coordinates[1] + 0.25*vertex_coordinates[4] + 0.25*vertex_coordinates[7] + 0.25*vertex_coordinates[10];
    dof_coordinates[2] = 0.25*vertex_coordinates[2] + 0.25*vertex_coordinates[5] + 0.25*vertex_coordinates[8] + 0.25*vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new protein_four_species_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class protein_four_species_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  protein_four_species_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new protein_four_species_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class protein_four_species_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  protein_four_species_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (5,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 5*num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 15;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + c.entity_indices[0][0];
    dofs[9] = offset + c.entity_indices[0][1];
    dofs[10] = offset + c.entity_indices[0][2];
    dofs[11] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + c.entity_indices[0][0];
    dofs[13] = offset + c.entity_indices[0][1];
    dofs[14] = offset + c.entity_indices[0][2];
    dofs[15] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[16] = offset + c.entity_indices[0][0];
    dofs[17] = offset + c.entity_indices[0][1];
    dofs[18] = offset + c.entity_indices[0][2];
    dofs[19] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 17;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 14;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 18;
      dofs[14] = 19;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 15;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 19;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 12;
      dofs[10] = 13;
      dofs[11] = 14;
      dofs[12] = 16;
      dofs[13] = 17;
      dofs[14] = 18;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
        dofs[3] = 12;
        dofs[4] = 16;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
        dofs[3] = 13;
        dofs[4] = 17;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
        dofs[3] = 14;
        dofs[4] = 18;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
        dofs[3] = 15;
        dofs[4] = 19;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double* dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0] = vertex_coordinates[0];
    dof_coordinates[1] = vertex_coordinates[1];
    dof_coordinates[2] = vertex_coordinates[2];
    dof_coordinates[3] = vertex_coordinates[3];
    dof_coordinates[4] = vertex_coordinates[4];
    dof_coordinates[5] = vertex_coordinates[5];
    dof_coordinates[6] = vertex_coordinates[6];
    dof_coordinates[7] = vertex_coordinates[7];
    dof_coordinates[8] = vertex_coordinates[8];
    dof_coordinates[9] = vertex_coordinates[9];
    dof_coordinates[10] = vertex_coordinates[10];
    dof_coordinates[11] = vertex_coordinates[11];
    dof_coordinates[12] = vertex_coordinates[0];
    dof_coordinates[13] = vertex_coordinates[1];
    dof_coordinates[14] = vertex_coordinates[2];
    dof_coordinates[15] = vertex_coordinates[3];
    dof_coordinates[16] = vertex_coordinates[4];
    dof_coordinates[17] = vertex_coordinates[5];
    dof_coordinates[18] = vertex_coordinates[6];
    dof_coordinates[19] = vertex_coordinates[7];
    dof_coordinates[20] = vertex_coordinates[8];
    dof_coordinates[21] = vertex_coordinates[9];
    dof_coordinates[22] = vertex_coordinates[10];
    dof_coordinates[23] = vertex_coordinates[11];
    dof_coordinates[24] = vertex_coordinates[0];
    dof_coordinates[25] = vertex_coordinates[1];
    dof_coordinates[26] = vertex_coordinates[2];
    dof_coordinates[27] = vertex_coordinates[3];
    dof_coordinates[28] = vertex_coordinates[4];
    dof_coordinates[29] = vertex_coordinates[5];
    dof_coordinates[30] = vertex_coordinates[6];
    dof_coordinates[31] = vertex_coordinates[7];
    dof_coordinates[32] = vertex_coordinates[8];
    dof_coordinates[33] = vertex_coordinates[9];
    dof_coordinates[34] = vertex_coordinates[10];
    dof_coordinates[35] = vertex_coordinates[11];
    dof_coordinates[36] = vertex_coordinates[0];
    dof_coordinates[37] = vertex_coordinates[1];
    dof_coordinates[38] = vertex_coordinates[2];
    dof_coordinates[39] = vertex_coordinates[3];
    dof_coordinates[40] = vertex_coordinates[4];
    dof_coordinates[41] = vertex_coordinates[5];
    dof_coordinates[42] = vertex_coordinates[6];
    dof_coordinates[43] = vertex_coordinates[7];
    dof_coordinates[44] = vertex_coordinates[8];
    dof_coordinates[45] = vertex_coordinates[9];
    dof_coordinates[46] = vertex_coordinates[10];
    dof_coordinates[47] = vertex_coordinates[11];
    dof_coordinates[48] = vertex_coordinates[0];
    dof_coordinates[49] = vertex_coordinates[1];
    dof_coordinates[50] = vertex_coordinates[2];
    dof_coordinates[51] = vertex_coordinates[3];
    dof_coordinates[52] = vertex_coordinates[4];
    dof_coordinates[53] = vertex_coordinates[5];
    dof_coordinates[54] = vertex_coordinates[6];
    dof_coordinates[55] = vertex_coordinates[7];
    dof_coordinates[56] = vertex_coordinates[8];
    dof_coordinates[57] = vertex_coordinates[9];
    dof_coordinates[58] = vertex_coordinates[10];
    dof_coordinates[59] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 5;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 1:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new protein_four_species_dofmap_2();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_0_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, true, false, false, false, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    31
    // Number of operations (multiply-add pairs) for tensor contraction: 28
    // Total number of operations (multiply-add pairs):                  62
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0 = det*(w[6][0]*((K[0]*K[0] + K[1]*K[1] + K[2]*K[2])));
    const double G0_0_0_1 = det*(w[6][0]*((K[0]*K[3] + K[1]*K[4] + K[2]*K[5])));
    const double G0_0_0_2 = det*(w[6][0]*((K[0]*K[6] + K[1]*K[7] + K[2]*K[8])));
    const double G0_0_1_0 = det*(w[6][0]*((K[3]*K[0] + K[4]*K[1] + K[5]*K[2])));
    const double G0_0_1_1 = det*(w[6][0]*((K[3]*K[3] + K[4]*K[4] + K[5]*K[5])));
    const double G0_0_1_2 = det*(w[6][0]*((K[3]*K[6] + K[4]*K[7] + K[5]*K[8])));
    const double G0_0_2_0 = det*(w[6][0]*((K[6]*K[0] + K[7]*K[1] + K[8]*K[2])));
    const double G0_0_2_1 = det*(w[6][0]*((K[6]*K[3] + K[7]*K[4] + K[8]*K[5])));
    const double G0_0_2_2 = det*(w[6][0]*((K[6]*K[6] + K[7]*K[7] + K[8]*K[8])));
    
    // Compute element tensor
    A[0] = 0.0;
    A[1] = 0.0;
    A[2] = 0.0;
    A[3] = 0.0;
    A[4] = 0.0;
    A[5] = 0.0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = 0.0;
    A[9] = 0.0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.0;
    A[19] = 0.0;
    A[20] = 0.0;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = 0.0;
    A[25] = 0.0;
    A[26] = 0.0;
    A[27] = 0.0;
    A[28] = 0.0;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = 0.0;
    A[45] = 0.0;
    A[46] = 0.0;
    A[47] = 0.0;
    A[48] = 0.0;
    A[49] = 0.0;
    A[50] = 0.0;
    A[51] = 0.0;
    A[52] = 0.0;
    A[53] = 0.0;
    A[54] = 0.0;
    A[55] = 0.0;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = 0.0;
    A[63] = 0.0;
    A[64] = 0.0;
    A[65] = 0.0;
    A[66] = 0.0;
    A[67] = 0.0;
    A[68] = 0.0;
    A[69] = 0.0;
    A[70] = 0.0;
    A[71] = 0.0;
    A[72] = 0.0;
    A[73] = 0.0;
    A[74] = 0.0;
    A[75] = 0.0;
    A[76] = 0.0;
    A[77] = 0.0;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = 0.0;
    A[82] = 0.0;
    A[83] = 0.0;
    A[84] = 0.0;
    A[85] = 0.0;
    A[86] = 0.0;
    A[87] = 0.0;
    A[88] = 0.0;
    A[89] = 0.0;
    A[90] = 0.0;
    A[91] = 0.0;
    A[92] = 0.0;
    A[93] = 0.0;
    A[94] = 0.0;
    A[95] = 0.0;
    A[96] = 0.0;
    A[97] = 0.0;
    A[98] = 0.0;
    A[99] = 0.0;
    A[100] = 0.0;
    A[101] = 0.0;
    A[102] = 0.0;
    A[103] = 0.0;
    A[104] = 0.0;
    A[105] = 0.0;
    A[106] = 0.0;
    A[107] = 0.0;
    A[108] = 0.0;
    A[109] = 0.0;
    A[110] = 0.0;
    A[111] = 0.0;
    A[112] = 0.0;
    A[113] = 0.0;
    A[114] = 0.0;
    A[115] = 0.0;
    A[116] = 0.0;
    A[117] = 0.0;
    A[118] = 0.0;
    A[119] = 0.0;
    A[120] = 0.0;
    A[121] = 0.0;
    A[122] = 0.0;
    A[123] = 0.0;
    A[124] = 0.0;
    A[125] = 0.0;
    A[126] = 0.0;
    A[127] = 0.0;
    A[128] = 0.0;
    A[129] = 0.0;
    A[130] = 0.0;
    A[131] = 0.0;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = 0.0;
    A[135] = 0.0;
    A[136] = 0.0;
    A[137] = 0.0;
    A[138] = 0.0;
    A[139] = 0.0;
    A[140] = 0.0;
    A[141] = 0.0;
    A[142] = 0.0;
    A[143] = 0.0;
    A[144] = 0.0;
    A[145] = 0.0;
    A[146] = 0.0;
    A[147] = 0.0;
    A[148] = 0.0;
    A[149] = 0.0;
    A[150] = 0.0;
    A[151] = 0.0;
    A[152] = 0.0;
    A[153] = 0.0;
    A[154] = 0.0;
    A[155] = 0.0;
    A[156] = 0.0;
    A[157] = 0.0;
    A[158] = 0.0;
    A[159] = 0.0;
    A[160] = 0.0;
    A[161] = 0.0;
    A[162] = 0.0;
    A[163] = 0.0;
    A[164] = 0.0;
    A[165] = 0.0;
    A[166] = 0.0;
    A[167] = 0.0;
    A[168] = 0.0;
    A[169] = 0.0;
    A[170] = 0.0;
    A[171] = 0.0;
    A[172] = 0.0;
    A[173] = 0.0;
    A[174] = 0.0;
    A[175] = 0.0;
    A[176] = 0.0;
    A[177] = 0.0;
    A[178] = 0.0;
    A[179] = 0.0;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.0;
    A[187] = 0.0;
    A[188] = 0.0;
    A[189] = 0.0;
    A[190] = 0.0;
    A[191] = 0.0;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.0;
    A[196] = 0.0;
    A[197] = 0.0;
    A[198] = 0.0;
    A[199] = 0.0;
    A[200] = 0.0;
    A[201] = 0.0;
    A[202] = 0.0;
    A[203] = 0.0;
    A[204] = 0.0;
    A[205] = 0.0;
    A[206] = 0.0;
    A[207] = 0.0;
    A[208] = 0.0;
    A[209] = 0.0;
    A[210] = 0.0;
    A[211] = 0.0;
    A[212] = 0.0;
    A[213] = 0.0;
    A[214] = 0.0;
    A[215] = 0.0;
    A[216] = 0.0;
    A[217] = 0.0;
    A[218] = 0.0;
    A[219] = 0.0;
    A[220] = 0.0;
    A[221] = 0.0;
    A[222] = 0.0;
    A[223] = 0.0;
    A[224] = 0.0;
    A[225] = 0.0;
    A[226] = 0.0;
    A[227] = 0.0;
    A[228] = 0.0;
    A[229] = 0.0;
    A[230] = 0.0;
    A[231] = 0.0;
    A[232] = 0.0;
    A[233] = 0.0;
    A[234] = 0.0;
    A[235] = 0.0;
    A[236] = 0.0;
    A[237] = 0.0;
    A[238] = 0.0;
    A[239] = 0.0;
    A[240] = 0.0;
    A[241] = 0.0;
    A[242] = 0.0;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = 0.0;
    A[248] = 0.0;
    A[249] = 0.0;
    A[250] = 0.0;
    A[251] = 0.0;
    A[252] = 0.0;
    A[253] = 0.0;
    A[254] = 0.0;
    A[255] = 0.0;
    A[256] = 0.0;
    A[257] = 0.0;
    A[258] = 0.0;
    A[259] = 0.0;
    A[260] = 0.0;
    A[261] = 0.0;
    A[262] = 0.0;
    A[263] = 0.0;
    A[264] = 0.0;
    A[265] = 0.0;
    A[266] = 0.0;
    A[267] = 0.0;
    A[268] = 0.0;
    A[269] = 0.0;
    A[270] = 0.0;
    A[271] = 0.0;
    A[272] = 0.0;
    A[273] = 0.0;
    A[274] = 0.0;
    A[275] = 0.0;
    A[276] = 0.0;
    A[277] = 0.0;
    A[278] = 0.0;
    A[279] = 0.0;
    A[280] = 0.0;
    A[281] = 0.0;
    A[282] = 0.0;
    A[283] = 0.0;
    A[284] = 0.0;
    A[285] = 0.0;
    A[286] = 0.0;
    A[287] = 0.0;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0;
    A[301] = 0.0;
    A[302] = 0.0;
    A[303] = 0.0;
    A[304] = 0.0;
    A[305] = 0.0;
    A[306] = 0.0;
    A[307] = 0.0;
    A[308] = 0.0;
    A[309] = 0.0;
    A[310] = 0.0;
    A[311] = 0.0;
    A[312] = 0.0;
    A[313] = 0.0;
    A[314] = 0.0;
    A[315] = 0.0;
    A[316] = 0.0;
    A[317] = 0.0;
    A[318] = 0.0;
    A[319] = 0.0;
    A[320] = 0.0;
    A[321] = 0.0;
    A[322] = 0.0;
    A[323] = 0.0;
    A[324] = 0.0;
    A[325] = 0.0;
    A[326] = 0.0;
    A[327] = 0.0;
    A[328] = 0.0;
    A[329] = 0.0;
    A[330] = 0.0;
    A[331] = 0.0;
    A[332] = 0.0;
    A[333] = 0.0;
    A[334] = 0.0;
    A[335] = 0.0;
    A[336] = 0.166666666666667*G0_0_0_0 + 0.166666666666667*G0_0_0_1 + 0.166666666666667*G0_0_0_2 + 0.166666666666667*G0_0_1_0 + 0.166666666666667*G0_0_1_1 + 0.166666666666667*G0_0_1_2 + 0.166666666666667*G0_0_2_0 + 0.166666666666667*G0_0_2_1 + 0.166666666666667*G0_0_2_2;
    A[337] = -0.166666666666667*G0_0_0_0 - 0.166666666666667*G0_0_1_0 - 0.166666666666667*G0_0_2_0;
    A[338] = -0.166666666666667*G0_0_0_1 - 0.166666666666667*G0_0_1_1 - 0.166666666666667*G0_0_2_1;
    A[339] = -0.166666666666667*G0_0_0_2 - 0.166666666666667*G0_0_1_2 - 0.166666666666667*G0_0_2_2;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = 0.0;
    A[349] = 0.0;
    A[350] = 0.0;
    A[351] = 0.0;
    A[352] = 0.0;
    A[353] = 0.0;
    A[354] = 0.0;
    A[355] = 0.0;
    A[356] = -0.166666666666667*G0_0_0_0 - 0.166666666666667*G0_0_0_1 - 0.166666666666667*G0_0_0_2;
    A[357] = 0.166666666666667*G0_0_0_0;
    A[358] = 0.166666666666667*G0_0_0_1;
    A[359] = 0.166666666666667*G0_0_0_2;
    A[360] = 0.0;
    A[361] = 0.0;
    A[362] = 0.0;
    A[363] = 0.0;
    A[364] = 0.0;
    A[365] = 0.0;
    A[366] = 0.0;
    A[367] = 0.0;
    A[368] = 0.0;
    A[369] = 0.0;
    A[370] = 0.0;
    A[371] = 0.0;
    A[372] = 0.0;
    A[373] = 0.0;
    A[374] = 0.0;
    A[375] = 0.0;
    A[376] = -0.166666666666667*G0_0_1_0 - 0.166666666666667*G0_0_1_1 - 0.166666666666667*G0_0_1_2;
    A[377] = 0.166666666666667*G0_0_1_0;
    A[378] = 0.166666666666667*G0_0_1_1;
    A[379] = 0.166666666666667*G0_0_1_2;
    A[380] = 0.0;
    A[381] = 0.0;
    A[382] = 0.0;
    A[383] = 0.0;
    A[384] = 0.0;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.0;
    A[388] = 0.0;
    A[389] = 0.0;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = -0.166666666666667*G0_0_2_0 - 0.166666666666667*G0_0_2_1 - 0.166666666666667*G0_0_2_2;
    A[397] = 0.166666666666667*G0_0_2_0;
    A[398] = 0.166666666666667*G0_0_2_1;
    A[399] = 0.166666666666667*G0_0_2_2;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_0_2: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_0_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_0_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, true, false, false, false, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    31
    // Number of operations (multiply-add pairs) for tensor contraction: 28
    // Total number of operations (multiply-add pairs):                  62
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0 = det*(w[6][0]*((K[0]*K[0] + K[1]*K[1] + K[2]*K[2])));
    const double G0_0_0_1 = det*(w[6][0]*((K[0]*K[3] + K[1]*K[4] + K[2]*K[5])));
    const double G0_0_0_2 = det*(w[6][0]*((K[0]*K[6] + K[1]*K[7] + K[2]*K[8])));
    const double G0_0_1_0 = det*(w[6][0]*((K[3]*K[0] + K[4]*K[1] + K[5]*K[2])));
    const double G0_0_1_1 = det*(w[6][0]*((K[3]*K[3] + K[4]*K[4] + K[5]*K[5])));
    const double G0_0_1_2 = det*(w[6][0]*((K[3]*K[6] + K[4]*K[7] + K[5]*K[8])));
    const double G0_0_2_0 = det*(w[6][0]*((K[6]*K[0] + K[7]*K[1] + K[8]*K[2])));
    const double G0_0_2_1 = det*(w[6][0]*((K[6]*K[3] + K[7]*K[4] + K[8]*K[5])));
    const double G0_0_2_2 = det*(w[6][0]*((K[6]*K[6] + K[7]*K[7] + K[8]*K[8])));
    
    // Compute element tensor
    A[0] = 0.0;
    A[1] = 0.0;
    A[2] = 0.0;
    A[3] = 0.0;
    A[4] = 0.0;
    A[5] = 0.0;
    A[6] = 0.0;
    A[7] = 0.0;
    A[8] = 0.0;
    A[9] = 0.0;
    A[10] = 0.0;
    A[11] = 0.0;
    A[12] = 0.0;
    A[13] = 0.0;
    A[14] = 0.0;
    A[15] = 0.0;
    A[16] = 0.0;
    A[17] = 0.0;
    A[18] = 0.0;
    A[19] = 0.0;
    A[20] = 0.0;
    A[21] = 0.0;
    A[22] = 0.0;
    A[23] = 0.0;
    A[24] = 0.0;
    A[25] = 0.0;
    A[26] = 0.0;
    A[27] = 0.0;
    A[28] = 0.0;
    A[29] = 0.0;
    A[30] = 0.0;
    A[31] = 0.0;
    A[32] = 0.0;
    A[33] = 0.0;
    A[34] = 0.0;
    A[35] = 0.0;
    A[36] = 0.0;
    A[37] = 0.0;
    A[38] = 0.0;
    A[39] = 0.0;
    A[40] = 0.0;
    A[41] = 0.0;
    A[42] = 0.0;
    A[43] = 0.0;
    A[44] = 0.0;
    A[45] = 0.0;
    A[46] = 0.0;
    A[47] = 0.0;
    A[48] = 0.0;
    A[49] = 0.0;
    A[50] = 0.0;
    A[51] = 0.0;
    A[52] = 0.0;
    A[53] = 0.0;
    A[54] = 0.0;
    A[55] = 0.0;
    A[56] = 0.0;
    A[57] = 0.0;
    A[58] = 0.0;
    A[59] = 0.0;
    A[60] = 0.0;
    A[61] = 0.0;
    A[62] = 0.0;
    A[63] = 0.0;
    A[64] = 0.0;
    A[65] = 0.0;
    A[66] = 0.0;
    A[67] = 0.0;
    A[68] = 0.0;
    A[69] = 0.0;
    A[70] = 0.0;
    A[71] = 0.0;
    A[72] = 0.0;
    A[73] = 0.0;
    A[74] = 0.0;
    A[75] = 0.0;
    A[76] = 0.0;
    A[77] = 0.0;
    A[78] = 0.0;
    A[79] = 0.0;
    A[80] = 0.0;
    A[81] = 0.0;
    A[82] = 0.0;
    A[83] = 0.0;
    A[84] = 0.0;
    A[85] = 0.0;
    A[86] = 0.0;
    A[87] = 0.0;
    A[88] = 0.0;
    A[89] = 0.0;
    A[90] = 0.0;
    A[91] = 0.0;
    A[92] = 0.0;
    A[93] = 0.0;
    A[94] = 0.0;
    A[95] = 0.0;
    A[96] = 0.0;
    A[97] = 0.0;
    A[98] = 0.0;
    A[99] = 0.0;
    A[100] = 0.0;
    A[101] = 0.0;
    A[102] = 0.0;
    A[103] = 0.0;
    A[104] = 0.0;
    A[105] = 0.0;
    A[106] = 0.0;
    A[107] = 0.0;
    A[108] = 0.0;
    A[109] = 0.0;
    A[110] = 0.0;
    A[111] = 0.0;
    A[112] = 0.0;
    A[113] = 0.0;
    A[114] = 0.0;
    A[115] = 0.0;
    A[116] = 0.0;
    A[117] = 0.0;
    A[118] = 0.0;
    A[119] = 0.0;
    A[120] = 0.0;
    A[121] = 0.0;
    A[122] = 0.0;
    A[123] = 0.0;
    A[124] = 0.0;
    A[125] = 0.0;
    A[126] = 0.0;
    A[127] = 0.0;
    A[128] = 0.0;
    A[129] = 0.0;
    A[130] = 0.0;
    A[131] = 0.0;
    A[132] = 0.0;
    A[133] = 0.0;
    A[134] = 0.0;
    A[135] = 0.0;
    A[136] = 0.0;
    A[137] = 0.0;
    A[138] = 0.0;
    A[139] = 0.0;
    A[140] = 0.0;
    A[141] = 0.0;
    A[142] = 0.0;
    A[143] = 0.0;
    A[144] = 0.0;
    A[145] = 0.0;
    A[146] = 0.0;
    A[147] = 0.0;
    A[148] = 0.0;
    A[149] = 0.0;
    A[150] = 0.0;
    A[151] = 0.0;
    A[152] = 0.0;
    A[153] = 0.0;
    A[154] = 0.0;
    A[155] = 0.0;
    A[156] = 0.0;
    A[157] = 0.0;
    A[158] = 0.0;
    A[159] = 0.0;
    A[160] = 0.0;
    A[161] = 0.0;
    A[162] = 0.0;
    A[163] = 0.0;
    A[164] = 0.0;
    A[165] = 0.0;
    A[166] = 0.0;
    A[167] = 0.0;
    A[168] = 0.0;
    A[169] = 0.0;
    A[170] = 0.0;
    A[171] = 0.0;
    A[172] = 0.0;
    A[173] = 0.0;
    A[174] = 0.0;
    A[175] = 0.0;
    A[176] = 0.0;
    A[177] = 0.0;
    A[178] = 0.0;
    A[179] = 0.0;
    A[180] = 0.0;
    A[181] = 0.0;
    A[182] = 0.0;
    A[183] = 0.0;
    A[184] = 0.0;
    A[185] = 0.0;
    A[186] = 0.0;
    A[187] = 0.0;
    A[188] = 0.0;
    A[189] = 0.0;
    A[190] = 0.0;
    A[191] = 0.0;
    A[192] = 0.0;
    A[193] = 0.0;
    A[194] = 0.0;
    A[195] = 0.0;
    A[196] = 0.0;
    A[197] = 0.0;
    A[198] = 0.0;
    A[199] = 0.0;
    A[200] = 0.0;
    A[201] = 0.0;
    A[202] = 0.0;
    A[203] = 0.0;
    A[204] = 0.0;
    A[205] = 0.0;
    A[206] = 0.0;
    A[207] = 0.0;
    A[208] = 0.0;
    A[209] = 0.0;
    A[210] = 0.0;
    A[211] = 0.0;
    A[212] = 0.0;
    A[213] = 0.0;
    A[214] = 0.0;
    A[215] = 0.0;
    A[216] = 0.0;
    A[217] = 0.0;
    A[218] = 0.0;
    A[219] = 0.0;
    A[220] = 0.0;
    A[221] = 0.0;
    A[222] = 0.0;
    A[223] = 0.0;
    A[224] = 0.0;
    A[225] = 0.0;
    A[226] = 0.0;
    A[227] = 0.0;
    A[228] = 0.0;
    A[229] = 0.0;
    A[230] = 0.0;
    A[231] = 0.0;
    A[232] = 0.0;
    A[233] = 0.0;
    A[234] = 0.0;
    A[235] = 0.0;
    A[236] = 0.0;
    A[237] = 0.0;
    A[238] = 0.0;
    A[239] = 0.0;
    A[240] = 0.0;
    A[241] = 0.0;
    A[242] = 0.0;
    A[243] = 0.0;
    A[244] = 0.0;
    A[245] = 0.0;
    A[246] = 0.0;
    A[247] = 0.0;
    A[248] = 0.0;
    A[249] = 0.0;
    A[250] = 0.0;
    A[251] = 0.0;
    A[252] = 0.0;
    A[253] = 0.0;
    A[254] = 0.0;
    A[255] = 0.0;
    A[256] = 0.0;
    A[257] = 0.0;
    A[258] = 0.0;
    A[259] = 0.0;
    A[260] = 0.0;
    A[261] = 0.0;
    A[262] = 0.0;
    A[263] = 0.0;
    A[264] = 0.0;
    A[265] = 0.0;
    A[266] = 0.0;
    A[267] = 0.0;
    A[268] = 0.0;
    A[269] = 0.0;
    A[270] = 0.0;
    A[271] = 0.0;
    A[272] = 0.0;
    A[273] = 0.0;
    A[274] = 0.0;
    A[275] = 0.0;
    A[276] = 0.0;
    A[277] = 0.0;
    A[278] = 0.0;
    A[279] = 0.0;
    A[280] = 0.0;
    A[281] = 0.0;
    A[282] = 0.0;
    A[283] = 0.0;
    A[284] = 0.0;
    A[285] = 0.0;
    A[286] = 0.0;
    A[287] = 0.0;
    A[288] = 0.0;
    A[289] = 0.0;
    A[290] = 0.0;
    A[291] = 0.0;
    A[292] = 0.0;
    A[293] = 0.0;
    A[294] = 0.0;
    A[295] = 0.0;
    A[296] = 0.0;
    A[297] = 0.0;
    A[298] = 0.0;
    A[299] = 0.0;
    A[300] = 0.0;
    A[301] = 0.0;
    A[302] = 0.0;
    A[303] = 0.0;
    A[304] = 0.0;
    A[305] = 0.0;
    A[306] = 0.0;
    A[307] = 0.0;
    A[308] = 0.0;
    A[309] = 0.0;
    A[310] = 0.0;
    A[311] = 0.0;
    A[312] = 0.0;
    A[313] = 0.0;
    A[314] = 0.0;
    A[315] = 0.0;
    A[316] = 0.0;
    A[317] = 0.0;
    A[318] = 0.0;
    A[319] = 0.0;
    A[320] = 0.0;
    A[321] = 0.0;
    A[322] = 0.0;
    A[323] = 0.0;
    A[324] = 0.0;
    A[325] = 0.0;
    A[326] = 0.0;
    A[327] = 0.0;
    A[328] = 0.0;
    A[329] = 0.0;
    A[330] = 0.0;
    A[331] = 0.0;
    A[332] = 0.0;
    A[333] = 0.0;
    A[334] = 0.0;
    A[335] = 0.0;
    A[336] = 0.166666666666667*G0_0_0_0 + 0.166666666666667*G0_0_0_1 + 0.166666666666667*G0_0_0_2 + 0.166666666666667*G0_0_1_0 + 0.166666666666667*G0_0_1_1 + 0.166666666666667*G0_0_1_2 + 0.166666666666667*G0_0_2_0 + 0.166666666666667*G0_0_2_1 + 0.166666666666667*G0_0_2_2;
    A[337] = -0.166666666666667*G0_0_0_0 - 0.166666666666667*G0_0_1_0 - 0.166666666666667*G0_0_2_0;
    A[338] = -0.166666666666667*G0_0_0_1 - 0.166666666666667*G0_0_1_1 - 0.166666666666667*G0_0_2_1;
    A[339] = -0.166666666666667*G0_0_0_2 - 0.166666666666667*G0_0_1_2 - 0.166666666666667*G0_0_2_2;
    A[340] = 0.0;
    A[341] = 0.0;
    A[342] = 0.0;
    A[343] = 0.0;
    A[344] = 0.0;
    A[345] = 0.0;
    A[346] = 0.0;
    A[347] = 0.0;
    A[348] = 0.0;
    A[349] = 0.0;
    A[350] = 0.0;
    A[351] = 0.0;
    A[352] = 0.0;
    A[353] = 0.0;
    A[354] = 0.0;
    A[355] = 0.0;
    A[356] = -0.166666666666667*G0_0_0_0 - 0.166666666666667*G0_0_0_1 - 0.166666666666667*G0_0_0_2;
    A[357] = 0.166666666666667*G0_0_0_0;
    A[358] = 0.166666666666667*G0_0_0_1;
    A[359] = 0.166666666666667*G0_0_0_2;
    A[360] = 0.0;
    A[361] = 0.0;
    A[362] = 0.0;
    A[363] = 0.0;
    A[364] = 0.0;
    A[365] = 0.0;
    A[366] = 0.0;
    A[367] = 0.0;
    A[368] = 0.0;
    A[369] = 0.0;
    A[370] = 0.0;
    A[371] = 0.0;
    A[372] = 0.0;
    A[373] = 0.0;
    A[374] = 0.0;
    A[375] = 0.0;
    A[376] = -0.166666666666667*G0_0_1_0 - 0.166666666666667*G0_0_1_1 - 0.166666666666667*G0_0_1_2;
    A[377] = 0.166666666666667*G0_0_1_0;
    A[378] = 0.166666666666667*G0_0_1_1;
    A[379] = 0.166666666666667*G0_0_1_2;
    A[380] = 0.0;
    A[381] = 0.0;
    A[382] = 0.0;
    A[383] = 0.0;
    A[384] = 0.0;
    A[385] = 0.0;
    A[386] = 0.0;
    A[387] = 0.0;
    A[388] = 0.0;
    A[389] = 0.0;
    A[390] = 0.0;
    A[391] = 0.0;
    A[392] = 0.0;
    A[393] = 0.0;
    A[394] = 0.0;
    A[395] = 0.0;
    A[396] = -0.166666666666667*G0_0_2_0 - 0.166666666666667*G0_0_2_1 - 0.166666666666667*G0_0_2_2;
    A[397] = 0.166666666666667*G0_0_2_0;
    A[398] = 0.166666666666667*G0_0_2_1;
    A[399] = 0.166666666666667*G0_0_2_2;
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_0_3: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_0_3() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_0_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, false, true, true, true, true, true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc15[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc19[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc23[4] = {8, 9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc27[4] = {12, 13, 14, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc31[4] = {16, 17, 18, 19};
    
    static const double FE0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc16[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc17[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc18[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc20[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc21[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc22[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc24[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc25[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc26[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc28[2] = {12, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc29[2] = {12, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc30[2] = {12, 13};
    
    // Array of non-zero columns
    static const unsigned int nzc32[2] = {16, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc33[2] = {16, 18};
    
    // Array of non-zero columns
    static const unsigned int nzc34[2] = {16, 17};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 400; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 406.
    double G[58];
    G[0] = det*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[1] = det*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[2] = det*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[3] = det*w[7][0]*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[4] = det*w[7][0]*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[5] = det*w[7][0]*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[6] = det*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[7] = det*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[8] = det*w[7][0]*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[9] = det*w[7][0]*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[10] = det*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[11] = det*w[7][0]*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] = det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[13] = det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] = det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[15] = det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[16] = det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] = det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[18] = det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[19] = det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[20] = det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[21] = det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[22] = det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] = det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] = det*w[13][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[25] = det*w[13][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] = det*w[13][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[27] = det*w[13][0]*w[14][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[28] = det*w[13][0]*w[14][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[29] = det*w[13][0]*w[14][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[30] = det*w[13][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[31] = det*w[13][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[32] = det*w[13][0]*w[14][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[33] = det*w[13][0]*w[14][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[34] = det*w[13][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[35] = det*w[13][0]*w[14][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[36] = det*w[11][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[37] = det*w[11][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[38] = det*w[11][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[39] = det*w[11][0]*w[12][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[40] = det*w[11][0]*w[12][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[41] = det*w[11][0]*w[12][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[42] = det*w[11][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[43] = det*w[11][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[44] = det*w[11][0]*w[12][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[45] = det*w[11][0]*w[12][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[46] = det*w[11][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[47] = det*w[11][0]*w[12][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[48] = det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[49] = det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[50] = det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[51] = det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[52] = det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[53] = det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[54] =  - det*w[8][0];
    G[55] =  - det*w[10][0];
    G[56] =  - det*w[14][0];
    G[57] =  - det*w[12][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 28110
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      
      // Total number of operations to compute function values = 60
      for (unsigned int r = 0; r < 2; r++)
      {
        F4 += FE0_D001[ip][r]*w[4][nzc2[r]];
        F5 += FE0_D001[ip][r]*w[4][nzc1[r]];
        F6 += FE0_D001[ip][r]*w[4][nzc0[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F8 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F11 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F12 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F13 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F14 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F15 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F16 += FE0_D001[ip][r]*w[3][nzc2[r]];
        F17 += FE0_D001[ip][r]*w[3][nzc1[r]];
        F18 += FE0_D001[ip][r]*w[3][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 32
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
        F2 += FE0[ip][r]*w[2][r];
        F3 += FE0[ip][r]*w[3][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 330
      double I[70];
      // Number of operations: 3
      I[0] = G[0]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[1] = G[1]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[2] = G[2]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[3] = G[3]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[4] = G[4]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[5] = G[5]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[6] = G[6]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[7] = G[7]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[8] = G[8]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[9] = G[9]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[10] = G[10]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[11] = G[11]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[12] = G[12]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[13] = G[13]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[14] = G[14]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[15] = G[15]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[16] = G[16]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[17] = G[17]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[18] = G[18]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[19] = G[19]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[20] = G[20]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[21] = G[21]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[22] = G[22]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[23] = G[23]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[24] = G[24]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[25] = G[25]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[26] = G[26]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[27] = G[27]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[28] = G[28]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[29] = G[29]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[30] = G[30]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[31] = G[31]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[32] = G[32]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[33] = G[33]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[34] = G[34]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[35] = G[35]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[36] = G[36]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[37] = G[37]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[38] = G[38]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[39] = G[39]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[40] = G[40]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[41] = G[41]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[42] = G[42]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[43] = G[43]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[44] = G[44]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[45] = G[45]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[46] = G[46]*W15[ip]*std::exp(F3);
      
      // Number of operations: 3
      I[47] = G[47]*W15[ip]*std::exp(F3);
      
      // Number of operations: 1
      I[48] = G[48]*W15[ip];
      
      // Number of operations: 1
      I[49] = G[49]*W15[ip];
      
      // Number of operations: 1
      I[50] = G[50]*W15[ip];
      
      // Number of operations: 1
      I[51] = G[51]*W15[ip];
      
      // Number of operations: 1
      I[52] = G[52]*W15[ip];
      
      // Number of operations: 1
      I[53] = G[53]*W15[ip];
      
      // Number of operations: 14
      I[54] = W15[ip]*std::exp(F0)*(F4*G[5] + F5*G[4] + F6*G[3] + F7*G[2] + F8*G[1] + F9*G[0]);
      
      // Number of operations: 14
      I[55] = W15[ip]*std::exp(F0)*(F4*G[9] + F5*G[8] + F6*G[4] + F7*G[7] + F8*G[6] + F9*G[1]);
      
      // Number of operations: 14
      I[56] = W15[ip]*std::exp(F0)*(F4*G[11] + F5*G[9] + F6*G[5] + F7*G[10] + F8*G[7] + F9*G[2]);
      
      // Number of operations: 14
      I[57] = W15[ip]*std::exp(F1)*(F10*G[14] + F11*G[13] + F12*G[12] + F4*G[17] + F5*G[16] + F6*G[15]);
      
      // Number of operations: 14
      I[58] = W15[ip]*std::exp(F1)*(F10*G[19] + F11*G[18] + F12*G[13] + F4*G[21] + F5*G[20] + F6*G[16]);
      
      // Number of operations: 14
      I[59] = W15[ip]*std::exp(F1)*(F10*G[22] + F11*G[19] + F12*G[14] + F4*G[23] + F5*G[21] + F6*G[17]);
      
      // Number of operations: 14
      I[60] = W15[ip]*std::exp(F2)*(F13*G[26] + F14*G[25] + F15*G[24] + F4*G[29] + F5*G[28] + F6*G[27]);
      
      // Number of operations: 14
      I[61] = W15[ip]*std::exp(F2)*(F13*G[31] + F14*G[30] + F15*G[25] + F4*G[33] + F5*G[32] + F6*G[28]);
      
      // Number of operations: 14
      I[62] = W15[ip]*std::exp(F2)*(F13*G[34] + F14*G[31] + F15*G[26] + F4*G[35] + F5*G[33] + F6*G[29]);
      
      // Number of operations: 14
      I[63] = W15[ip]*std::exp(F3)*(F16*G[38] + F17*G[37] + F18*G[36] + F4*G[41] + F5*G[40] + F6*G[39]);
      
      // Number of operations: 14
      I[64] = W15[ip]*std::exp(F3)*(F16*G[43] + F17*G[42] + F18*G[37] + F4*G[45] + F5*G[44] + F6*G[40]);
      
      // Number of operations: 14
      I[65] = W15[ip]*std::exp(F3)*(F16*G[46] + F17*G[43] + F18*G[38] + F4*G[47] + F5*G[45] + F6*G[41]);
      
      // Number of operations: 3
      I[66] = G[54]*W15[ip]*std::exp(F0);
      
      // Number of operations: 3
      I[67] = G[55]*W15[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[68] = G[56]*W15[ip]*std::exp(F2);
      
      // Number of operations: 3
      I[69] = G[57]*W15[ip]*std::exp(F3);
      
      
      // Number of operations for primary indices: 972
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc16[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc17[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc18[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc16[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc17[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc18[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc16[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc17[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc18[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc20[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc21[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc22[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc20[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc21[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc22[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc20[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc21[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc22[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc24[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc25[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc26[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc24[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc25[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[30];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc26[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc24[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc25[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc26[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[34];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[29];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[35];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc28[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc29[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc30[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[39];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc28[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc29[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[42];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc30[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[44];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[45];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc28[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[38];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc29[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[43];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc30[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[46];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[45];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[47];
          // Number of operations to compute entry: 3
          A[nzc32[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[48];
          // Number of operations to compute entry: 3
          A[nzc32[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[49];
          // Number of operations to compute entry: 3
          A[nzc32[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[50];
          // Number of operations to compute entry: 3
          A[nzc33[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[49];
          // Number of operations to compute entry: 3
          A[nzc33[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[51];
          // Number of operations to compute entry: 3
          A[nzc33[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[52];
          // Number of operations to compute entry: 3
          A[nzc34[j]*20 + nzc32[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[50];
          // Number of operations to compute entry: 3
          A[nzc34[j]*20 + nzc33[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[52];
          // Number of operations to compute entry: 3
          A[nzc34[j]*20 + nzc34[k]] += FE0_D001[ip][j]*FE0_D001[ip][k]*I[53];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 288
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc16[j]*20 + nzc15[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[54];
          // Number of operations to compute entry: 3
          A[nzc17[j]*20 + nzc15[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[55];
          // Number of operations to compute entry: 3
          A[nzc18[j]*20 + nzc15[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[56];
          // Number of operations to compute entry: 3
          A[nzc20[j]*20 + nzc19[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[57];
          // Number of operations to compute entry: 3
          A[nzc21[j]*20 + nzc19[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[58];
          // Number of operations to compute entry: 3
          A[nzc22[j]*20 + nzc19[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[59];
          // Number of operations to compute entry: 3
          A[nzc24[j]*20 + nzc23[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[60];
          // Number of operations to compute entry: 3
          A[nzc25[j]*20 + nzc23[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[61];
          // Number of operations to compute entry: 3
          A[nzc26[j]*20 + nzc23[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[62];
          // Number of operations to compute entry: 3
          A[nzc28[j]*20 + nzc27[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[63];
          // Number of operations to compute entry: 3
          A[nzc29[j]*20 + nzc27[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[64];
          // Number of operations to compute entry: 3
          A[nzc30[j]*20 + nzc27[k]] += FE0[ip][k]*FE0_D001[ip][j]*I[65];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 192
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc31[j]*20 + nzc15[k]] += FE0[ip][j]*FE0[ip][k]*I[66];
          // Number of operations to compute entry: 3
          A[nzc31[j]*20 + nzc19[k]] += FE0[ip][j]*FE0[ip][k]*I[67];
          // Number of operations to compute entry: 3
          A[nzc31[j]*20 + nzc23[k]] += FE0[ip][j]*FE0[ip][k]*I[68];
          // Number of operations to compute entry: 3
          A[nzc31[j]*20 + nzc27[k]] += FE0[ip][j]*FE0[ip][k]*I[69];
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_1_1: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_1_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_1_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W1 = 0.166666666666667;
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25)
    
    // Values of basis functions at quadrature points.
    static const double FE0_D001[1][2] = \
    {{-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc32[2] = {16, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc33[2] = {16, 18};
    
    // Array of non-zero columns
    static const unsigned int nzc34[2] = {16, 17};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 20; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 48.
    double G[6];
    G[0] =  - W1*det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - W1*det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[2] =  - W1*det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[3] =  - W1*det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[4] =  - W1*det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[5] =  - W1*det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 39
    for (unsigned int ip = 0; ip < 1; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      
      // Total number of operations to compute function values = 12
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[0][r]*w[4][nzc2[r]];
        F1 += FE0_D001[0][r]*w[4][nzc1[r]];
        F2 += FE0_D001[0][r]*w[4][nzc0[r]];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 15
      double I[3];
      // Number of operations: 5
      I[0] = (F0*G[0] + F1*G[1] + F2*G[2]);
      
      // Number of operations: 5
      I[1] = (F0*G[3] + F1*G[4] + F2*G[1]);
      
      // Number of operations: 5
      I[2] = (F0*G[5] + F1*G[3] + F2*G[0]);
      
      
      // Number of operations for primary indices: 12
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc32[j]] += FE0_D001[0][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc33[j]] += FE0_D001[0][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc34[j]] += FE0_D001[0][j]*I[2];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_1_2: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_1_2() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_1_2()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W1 = 0.166666666666667;
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25)
    
    // Values of basis functions at quadrature points.
    static const double FE0_D001[1][2] = \
    {{-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc32[2] = {16, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc33[2] = {16, 18};
    
    // Array of non-zero columns
    static const unsigned int nzc34[2] = {16, 17};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 20; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 48.
    double G[6];
    G[0] =  - W1*det*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - W1*det*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[2] =  - W1*det*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[3] =  - W1*det*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[4] =  - W1*det*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[5] =  - W1*det*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 39
    for (unsigned int ip = 0; ip < 1; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      
      // Total number of operations to compute function values = 12
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[0][r]*w[4][nzc2[r]];
        F1 += FE0_D001[0][r]*w[4][nzc1[r]];
        F2 += FE0_D001[0][r]*w[4][nzc0[r]];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 15
      double I[3];
      // Number of operations: 5
      I[0] = (F0*G[0] + F1*G[1] + F2*G[2]);
      
      // Number of operations: 5
      I[1] = (F0*G[3] + F1*G[4] + F2*G[1]);
      
      // Number of operations: 5
      I[2] = (F0*G[5] + F1*G[3] + F2*G[0]);
      
      
      // Number of operations for primary indices: 12
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc32[j]] += FE0_D001[0][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc33[j]] += FE0_D001[0][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc34[j]] += FE0_D001[0][j]*I[2];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class protein_four_species_cell_integral_1_3: public ufc::cell_integral
{
public:

  /// Constructor
  protein_four_species_cell_integral_1_3() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_cell_integral_1_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W14[14] = {0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.00317460317460317, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0147649707904968, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651, 0.0221397911142651};
    // Quadrature points on the UFC reference element: (0.0, 0.5, 0.5), (0.5, 0.0, 0.5), (0.5, 0.5, 0.0), (0.5, 0.0, 0.0), (0.0, 0.5, 0.0), (0.0, 0.0, 0.5), (0.698419704324387, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.100526765225204), (0.100526765225204, 0.100526765225204, 0.698419704324387), (0.100526765225204, 0.698419704324387, 0.100526765225204), (0.0568813795204234, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.314372873493192), (0.314372873493192, 0.314372873493192, 0.0568813795204234), (0.314372873493192, 0.0568813795204234, 0.314372873493192)
    
    // Values of basis functions at quadrature points.
    static const double FE0[14][4] = \
    {{0.0, 0.0, 0.5, 0.5},
    {0.0, 0.5, 0.0, 0.5},
    {0.0, 0.5, 0.5, 0.0},
    {0.5, 0.5, 0.0, 0.0},
    {0.5, 0.0, 0.5, 0.0},
    {0.5, 0.0, 0.0, 0.5},
    {0.100526765225205, 0.698419704324386, 0.100526765225205, 0.100526765225205},
    {0.698419704324387, 0.100526765225204, 0.100526765225205, 0.100526765225205},
    {0.100526765225205, 0.100526765225204, 0.100526765225205, 0.698419704324386},
    {0.100526765225205, 0.100526765225204, 0.698419704324386, 0.100526765225205},
    {0.314372873493192, 0.0568813795204234, 0.314372873493192, 0.314372873493192},
    {0.0568813795204235, 0.314372873493192, 0.314372873493192, 0.314372873493192},
    {0.314372873493192, 0.314372873493192, 0.314372873493192, 0.0568813795204234},
    {0.314372873493192, 0.314372873493192, 0.0568813795204235, 0.314372873493192}};
    
    // Array of non-zero columns
    static const unsigned int nzc31[4] = {16, 17, 18, 19};
    
    static const double FE0_D001[14][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc16[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc17[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc18[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc20[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc21[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc22[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc24[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc25[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc26[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc28[2] = {12, 15};
    
    // Array of non-zero columns
    static const unsigned int nzc29[2] = {12, 14};
    
    // Array of non-zero columns
    static const unsigned int nzc30[2] = {12, 13};
    
    // Array of non-zero columns
    static const unsigned int nzc32[2] = {16, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc33[2] = {16, 18};
    
    // Array of non-zero columns
    static const unsigned int nzc34[2] = {16, 17};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 20; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 406.
    double G[58];
    G[0] =  - det*w[7][0]*w[8][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[1] =  - det*w[7][0]*w[8][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[2] =  - det*w[7][0]*w[8][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[3] =  - det*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[4] =  - det*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[5] =  - det*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[6] =  - det*w[7][0]*w[8][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[7] =  - det*w[7][0]*w[8][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[8] =  - det*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[9] =  - det*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[10] =  - det*w[7][0]*w[8][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[11] =  - det*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[12] =  - det*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[13] =  - det*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[14] =  - det*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[15] =  - det*w[10][0]*w[9][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[16] =  - det*w[10][0]*w[9][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[17] =  - det*w[10][0]*w[9][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[18] =  - det*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[19] =  - det*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[20] =  - det*w[10][0]*w[9][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[21] =  - det*w[10][0]*w[9][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[22] =  - det*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[23] =  - det*w[10][0]*w[9][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[24] =  - det*w[13][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[25] =  - det*w[13][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[26] =  - det*w[13][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[27] =  - det*w[13][0]*w[14][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[28] =  - det*w[13][0]*w[14][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[29] =  - det*w[13][0]*w[14][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[30] =  - det*w[13][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[31] =  - det*w[13][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[32] =  - det*w[13][0]*w[14][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[33] =  - det*w[13][0]*w[14][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[34] =  - det*w[13][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[35] =  - det*w[13][0]*w[14][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[36] =  - det*w[11][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[37] =  - det*w[11][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[38] =  - det*w[11][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[39] =  - det*w[11][0]*w[12][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[40] =  - det*w[11][0]*w[12][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[41] =  - det*w[11][0]*w[12][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[42] =  - det*w[11][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[43] =  - det*w[11][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[44] =  - det*w[11][0]*w[12][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[45] =  - det*w[11][0]*w[12][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[46] =  - det*w[11][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[47] =  - det*w[11][0]*w[12][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[48] =  - det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[49] =  - det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[50] =  - det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[51] =  - det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[52] =  - det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[53] =  - det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[54] = det*w[8][0];
    G[55] = det*w[10][0];
    G[56] = det*w[14][0];
    G[57] = det*w[12][0];
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 5012
    for (unsigned int ip = 0; ip < 14; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      
      // Total number of operations to compute function values = 60
      for (unsigned int r = 0; r < 2; r++)
      {
        F4 += FE0_D001[ip][r]*w[4][nzc2[r]];
        F5 += FE0_D001[ip][r]*w[4][nzc1[r]];
        F6 += FE0_D001[ip][r]*w[4][nzc0[r]];
        F7 += FE0_D001[ip][r]*w[0][nzc2[r]];
        F8 += FE0_D001[ip][r]*w[0][nzc1[r]];
        F9 += FE0_D001[ip][r]*w[0][nzc0[r]];
        F10 += FE0_D001[ip][r]*w[1][nzc2[r]];
        F11 += FE0_D001[ip][r]*w[1][nzc1[r]];
        F12 += FE0_D001[ip][r]*w[1][nzc0[r]];
        F13 += FE0_D001[ip][r]*w[2][nzc2[r]];
        F14 += FE0_D001[ip][r]*w[2][nzc1[r]];
        F15 += FE0_D001[ip][r]*w[2][nzc0[r]];
        F16 += FE0_D001[ip][r]*w[3][nzc2[r]];
        F17 += FE0_D001[ip][r]*w[3][nzc1[r]];
        F18 += FE0_D001[ip][r]*w[3][nzc0[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 32
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[0][r];
        F1 += FE0[ip][r]*w[1][r];
        F2 += FE0[ip][r]*w[2][r];
        F3 += FE0[ip][r]*w[3][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 198
      double I[16];
      // Number of operations: 14
      I[0] = W14[ip]*std::exp(F0)*(F4*G[0] + F5*G[1] + F6*G[2] + F7*G[3] + F8*G[4] + F9*G[5]);
      
      // Number of operations: 14
      I[1] = W14[ip]*std::exp(F0)*(F4*G[6] + F5*G[7] + F6*G[1] + F7*G[8] + F8*G[9] + F9*G[4]);
      
      // Number of operations: 14
      I[2] = W14[ip]*std::exp(F0)*(F4*G[10] + F5*G[6] + F6*G[0] + F7*G[11] + F8*G[8] + F9*G[3]);
      
      // Number of operations: 14
      I[3] = W14[ip]*std::exp(F1)*(F10*G[12] + F11*G[13] + F12*G[14] + F4*G[15] + F5*G[16] + F6*G[17]);
      
      // Number of operations: 14
      I[4] = W14[ip]*std::exp(F1)*(F10*G[18] + F11*G[19] + F12*G[13] + F4*G[20] + F5*G[21] + F6*G[16]);
      
      // Number of operations: 14
      I[5] = W14[ip]*std::exp(F1)*(F10*G[22] + F11*G[18] + F12*G[12] + F4*G[23] + F5*G[20] + F6*G[15]);
      
      // Number of operations: 14
      I[6] = W14[ip]*std::exp(F2)*(F13*G[24] + F14*G[25] + F15*G[26] + F4*G[27] + F5*G[28] + F6*G[29]);
      
      // Number of operations: 14
      I[7] = W14[ip]*std::exp(F2)*(F13*G[30] + F14*G[31] + F15*G[25] + F4*G[32] + F5*G[33] + F6*G[28]);
      
      // Number of operations: 14
      I[8] = W14[ip]*std::exp(F2)*(F13*G[34] + F14*G[30] + F15*G[24] + F4*G[35] + F5*G[32] + F6*G[27]);
      
      // Number of operations: 14
      I[9] = W14[ip]*std::exp(F3)*(F16*G[36] + F17*G[37] + F18*G[38] + F4*G[39] + F5*G[40] + F6*G[41]);
      
      // Number of operations: 14
      I[10] = W14[ip]*std::exp(F3)*(F16*G[42] + F17*G[43] + F18*G[37] + F4*G[44] + F5*G[45] + F6*G[40]);
      
      // Number of operations: 14
      I[11] = W14[ip]*std::exp(F3)*(F16*G[46] + F17*G[42] + F18*G[36] + F4*G[47] + F5*G[44] + F6*G[39]);
      
      // Number of operations: 6
      I[12] = W14[ip]*(F4*G[48] + F5*G[49] + F6*G[50]);
      
      // Number of operations: 6
      I[13] = W14[ip]*(F4*G[51] + F5*G[52] + F6*G[49]);
      
      // Number of operations: 6
      I[14] = W14[ip]*(F4*G[53] + F5*G[51] + F6*G[48]);
      
      // Number of operations: 12
      I[15] = W14[ip]*(G[54]*std::exp(F0) + G[55]*std::exp(F1) + G[56]*std::exp(F2) + G[57]*std::exp(F3));
      
      
      // Number of operations for primary indices: 60
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc16[j]] += FE0_D001[ip][j]*I[0];
        // Number of operations to compute entry: 2
        A[nzc17[j]] += FE0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc18[j]] += FE0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc20[j]] += FE0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc21[j]] += FE0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc22[j]] += FE0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc24[j]] += FE0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc25[j]] += FE0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc26[j]] += FE0_D001[ip][j]*I[8];
        // Number of operations to compute entry: 2
        A[nzc28[j]] += FE0_D001[ip][j]*I[9];
        // Number of operations to compute entry: 2
        A[nzc29[j]] += FE0_D001[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc30[j]] += FE0_D001[ip][j]*I[11];
        // Number of operations to compute entry: 2
        A[nzc32[j]] += FE0_D001[ip][j]*I[12];
        // Number of operations to compute entry: 2
        A[nzc33[j]] += FE0_D001[ip][j]*I[13];
        // Number of operations to compute entry: 2
        A[nzc34[j]] += FE0_D001[ip][j]*I[14];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc31[j]] += FE0[ip][j]*I[15];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class protein_four_species_interior_facet_integral_1_6: public ufc::interior_facet_integral
{
public:

  /// Constructor
  protein_four_species_interior_facet_integral_1_6() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_interior_facet_integral_1_6()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(vertex_coordinates_0[3*facet_0] - vertex_coordinates_0[3*v0]) + a1*(vertex_coordinates_0[3*facet_0 + 1] - vertex_coordinates_0[3*v0 + 1])  + a2*(vertex_coordinates_0[3*facet_0 + 2] - vertex_coordinates_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Compute cell volume
    // Compute cell volume
    
    
    // Compute circumradius
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W1 = 0.5;
    // Quadrature points on the UFC reference element: (0.333333333333333, 0.333333333333333)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0[1][3] = \
    {{0.333333333333333, 0.333333333333333, 0.333333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc32[3] = {17, 18, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc37[3] = {16, 18, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc42[3] = {16, 17, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc47[3] = {16, 17, 18};
    
    static const double FE0_f0_D001[1][2] = \
    {{-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 1};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 40; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 54.
    double G[6];
    G[0] = -0.5*W1*det*w[6][0]*(K_0[0]*n_00 + K_0[1]*n_01 + K_0[2]*n_02);
    G[1] = -0.5*W1*det*w[6][0]*(K_0[3]*n_00 + K_0[4]*n_01 + K_0[5]*n_02);
    G[2] = -0.5*W1*det*w[6][0]*(K_0[6]*n_00 + K_0[7]*n_01 + K_0[8]*n_02);
    G[3] = 0.5*W1*det*w[6][0]*(K_1[0]*n_00 + K_1[1]*n_01 + K_1[2]*n_02);
    G[4] = 0.5*W1*det*w[6][0]*(K_1[3]*n_00 + K_1[4]*n_01 + K_1[5]*n_02);
    G[5] = 0.5*W1*det*w[6][0]*(K_1[6]*n_00 + K_1[7]*n_01 + K_1[8]*n_02);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the
/// interior facet tensor corresponding to the local contribution to
/// a form from the integral over an interior facet.

class protein_four_species_interior_facet_integral_1_7: public ufc::interior_facet_integral
{
public:

  /// Constructor
  protein_four_species_interior_facet_integral_1_7() : ufc::interior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_interior_facet_integral_1_7()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local interior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates_0,
                               const double*  vertex_coordinates_1,
                               std::size_t facet_0,
                               std::size_t facet_1,
                               int cell_orientation_0,
                               int cell_orientation_1) const
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, vertex_coordinates_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, vertex_coordinates_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v1 + 2]  + vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v2 + 1]  + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v2 + 2]) - (vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v1 + 2] + vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v0 + 1] + vertex_coordinates_0[3*v1 + 1]*vertex_coordinates_0[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates_0[3*v0 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v2 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v2 + 0]) - (vertex_coordinates_0[3*v2 + 2]*vertex_coordinates_0[3*v1 + 0]  + vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v0 + 2] + vertex_coordinates_0[3*v1 + 2]*vertex_coordinates_0[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates_0[3*v0 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v0 + 1]*vertex_coordinates_0[3*v2 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v2 + 1]) - (vertex_coordinates_0[3*v2 + 0]*vertex_coordinates_0[3*v1 + 1]  + vertex_coordinates_0[3*v2 + 1]*vertex_coordinates_0[3*v0 + 0]  + vertex_coordinates_0[3*v1 + 0]*vertex_coordinates_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(vertex_coordinates_0[3*facet_0] - vertex_coordinates_0[3*v0]) + a1*(vertex_coordinates_0[3*facet_0 + 1] - vertex_coordinates_0[3*v0 + 1])  + a2*(vertex_coordinates_0[3*facet_0 + 2] - vertex_coordinates_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, vertex_coordinates_0);
    
    
    // Compute cell volume
    // Compute cell volume
    
    
    // Compute circumradius
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W1 = 0.5;
    // Quadrature points on the UFC reference element: (0.333333333333333, 0.333333333333333)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0[1][3] = \
    {{0.333333333333333, 0.333333333333333, 0.333333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc32[3] = {17, 18, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc37[3] = {16, 18, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc42[3] = {16, 17, 19};
    
    // Array of non-zero columns
    static const unsigned int nzc47[3] = {16, 17, 18};
    
    static const double FE0_f0_D001[1][2] = \
    {{-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc3[2] = {0, 1};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 40; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 54.
    double G[6];
    G[0] = -0.5*W1*det*w[6][0]*(K_0[0]*n_00 + K_0[1]*n_01 + K_0[2]*n_02);
    G[1] = -0.5*W1*det*w[6][0]*(K_0[3]*n_00 + K_0[4]*n_01 + K_0[5]*n_02);
    G[2] = -0.5*W1*det*w[6][0]*(K_0[6]*n_00 + K_0[7]*n_01 + K_0[8]*n_02);
    G[3] = 0.5*W1*det*w[6][0]*(K_1[0]*n_00 + K_1[1]*n_01 + K_1[2]*n_02);
    G[4] = 0.5*W1*det*w[6][0]*(K_1[3]*n_00 + K_1[4]*n_01 + K_1[5]*n_02);
    G[5] = 0.5*W1*det*w[6][0]*(K_1[6]*n_00 + K_1[7]*n_01 + K_1[8]*n_02);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc32[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc37[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc42[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc32[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc37[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc42[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 47
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 47
        for (unsigned int ip = 0; ip < 1; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 24
          for (unsigned int r = 0; r < 2; r++)
          {
            F0 += FE0_f0_D001[0][r]*w[15][nzc3[r]];
            F1 += FE0_f0_D001[0][r]*w[15][nzc2[r]];
            F2 += FE0_f0_D001[0][r]*w[15][nzc1[r]];
            F3 += FE0_f0_D001[0][r]*w[15][nzc3[r] + 4];
            F4 += FE0_f0_D001[0][r]*w[15][nzc2[r] + 4];
            F5 += FE0_f0_D001[0][r]*w[15][nzc1[r] + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 11
          double I[1];
          // Number of operations: 11
          I[0] = (F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5]);
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 3; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc47[j] + 20)] += FE0_f0[0][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc47[j]] += FE0_f0[0][j]*I[0];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class protein_four_species_form_0: public ufc::form
{
public:

  /// Constructor
  protein_four_species_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "373c5d1dfa38f53ccb09bb5e0cbb428331cd7e6b25fa024b1b5f0062b700686a04132b16633a5d5c3987c086e8ca6d8a05bfb8fed2eff573eba0db89d590b5c8";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 15;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 4;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_finite_element_2();
        break;
      }
    case 1:
      {
        return new protein_four_species_finite_element_2();
        break;
      }
    case 2:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 5:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 6:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 7:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 8:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 9:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 10:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 11:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 12:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 13:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 14:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 15:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 16:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_dofmap_2();
        break;
      }
    case 1:
      {
        return new protein_four_species_dofmap_2();
        break;
      }
    case 2:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 5:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 6:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 7:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 8:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 9:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 10:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 11:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 12:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 13:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 14:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 15:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 16:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 1:
      {
        return new protein_four_species_cell_integral_0_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_cell_integral_0_2();
        break;
      }
    case 3:
      {
        return new protein_four_species_cell_integral_0_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class protein_four_species_form_1: public ufc::form
{
public:

  /// Constructor
  protein_four_species_form_1() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~protein_four_species_form_1()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "73a5f89e9a6aa79e46e6225339fdf73440efacc937218a8816b12558b993d45744c5b635a483d7cc5909ea45761fed4f63f56bf18f4d20246bd64ed7939770ac";
  }

  /// Return original coefficient position for each coefficient (0 <= i < n)
  virtual std::size_t original_coefficient_position(std::size_t i) const
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15});
    return position[i];
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 16;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 4;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 8;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_finite_element_2();
        break;
      }
    case 1:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 5:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    case 6:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 7:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 8:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 9:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 10:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 11:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 12:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 13:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 14:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 15:
      {
        return new protein_four_species_finite_element_0();
        break;
      }
    case 16:
      {
        return new protein_four_species_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new protein_four_species_dofmap_2();
        break;
      }
    case 1:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 3:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 4:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 5:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    case 6:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 7:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 8:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 9:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 10:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 11:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 12:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 13:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 14:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 15:
      {
        return new protein_four_species_dofmap_0();
        break;
      }
    case 16:
      {
        return new protein_four_species_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 1:
      {
        return new protein_four_species_cell_integral_1_1();
        break;
      }
    case 2:
      {
        return new protein_four_species_cell_integral_1_2();
        break;
      }
    case 3:
      {
        return new protein_four_species_cell_integral_1_3();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 6:
      {
        return new protein_four_species_interior_facet_integral_1_6();
        break;
      }
    case 7:
      {
        return new protein_four_species_interior_facet_integral_1_7();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>

namespace protein_four_species
{

class CoefficientSpace_CaCa: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_CaCa(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_CaCa(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_CaCa(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_CaCa(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_ClCl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_ClCl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_ClCl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_ClCl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_ClCl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dca: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dca(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dca(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dca(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dca(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dcl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dcl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dcl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dcl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dcl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dk: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dk(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dk(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dk(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dk(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_Dna: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dna(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dna(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_Dna(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_Dna(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_EsEs: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_EsEs(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_EsEs(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_EsEs(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_EsEs(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_KK: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_KK(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_KK(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_KK(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_KK(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_NaNa: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_NaNa(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_NaNa(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_NaNa(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_NaNa(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_eps_m: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_m(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_m(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_m(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_m(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_eps_s: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_s(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_s(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_eps_s(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_eps_s(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_phi_surf: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_phi_surf(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_phi_surf(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_phi_surf(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_phi_surf(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_1()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_1()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qca: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qca(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qca(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qca(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qca(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qcl: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qcl(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qcl(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qcl(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qcl(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qk: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qk(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qk(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qk(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qk(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class CoefficientSpace_qna: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qna(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qna(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  CoefficientSpace_qna(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  CoefficientSpace_qna(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_0()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_0()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_a_FunctionSpace_1(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_NaNa Form_a_FunctionSpace_2;

typedef CoefficientSpace_KK Form_a_FunctionSpace_3;

typedef CoefficientSpace_CaCa Form_a_FunctionSpace_4;

typedef CoefficientSpace_ClCl Form_a_FunctionSpace_5;

typedef CoefficientSpace_EsEs Form_a_FunctionSpace_6;

typedef CoefficientSpace_eps_s Form_a_FunctionSpace_7;

typedef CoefficientSpace_eps_m Form_a_FunctionSpace_8;

typedef CoefficientSpace_Dna Form_a_FunctionSpace_9;

typedef CoefficientSpace_qna Form_a_FunctionSpace_10;

typedef CoefficientSpace_Dk Form_a_FunctionSpace_11;

typedef CoefficientSpace_qk Form_a_FunctionSpace_12;

typedef CoefficientSpace_Dcl Form_a_FunctionSpace_13;

typedef CoefficientSpace_qcl Form_a_FunctionSpace_14;

typedef CoefficientSpace_Dca Form_a_FunctionSpace_15;

typedef CoefficientSpace_qca Form_a_FunctionSpace_16;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& NaNa, const dolfin::GenericFunction& KK, const dolfin::GenericFunction& CaCa, const dolfin::GenericFunction& ClCl, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_s, const dolfin::GenericFunction& eps_m, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->NaNa = NaNa;
    this->KK = KK;
    this->CaCa = CaCa;
    this->ClCl = ClCl;
    this->EsEs = EsEs;
    this->eps_s = eps_s;
    this->eps_m = eps_m;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Constructor
  Form_a(const dolfin::FunctionSpace& V1, const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> NaNa, std::shared_ptr<const dolfin::GenericFunction> KK, std::shared_ptr<const dolfin::GenericFunction> CaCa, std::shared_ptr<const dolfin::GenericFunction> ClCl, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_s, std::shared_ptr<const dolfin::GenericFunction> eps_m, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);
    _function_spaces[1] = reference_to_no_delete_pointer(V1);

    this->NaNa = *NaNa;
    this->KK = *KK;
    this->CaCa = *CaCa;
    this->ClCl = *ClCl;
    this->EsEs = *EsEs;
    this->eps_s = *eps_s;
    this->eps_m = *eps_m;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& NaNa, const dolfin::GenericFunction& KK, const dolfin::GenericFunction& CaCa, const dolfin::GenericFunction& ClCl, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_s, const dolfin::GenericFunction& eps_m, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->NaNa = NaNa;
    this->KK = KK;
    this->CaCa = CaCa;
    this->ClCl = ClCl;
    this->EsEs = EsEs;
    this->eps_s = eps_s;
    this->eps_m = eps_m;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> NaNa, std::shared_ptr<const dolfin::GenericFunction> KK, std::shared_ptr<const dolfin::GenericFunction> CaCa, std::shared_ptr<const dolfin::GenericFunction> ClCl, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_s, std::shared_ptr<const dolfin::GenericFunction> eps_m, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca):
    dolfin::Form(2, 15), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->NaNa = *NaNa;
    this->KK = *KK;
    this->CaCa = *CaCa;
    this->ClCl = *ClCl;
    this->EsEs = *EsEs;
    this->eps_s = *eps_s;
    this->eps_m = *eps_m;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_0());
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "NaNa")
      return 0;
    else if (name == "KK")
      return 1;
    else if (name == "CaCa")
      return 2;
    else if (name == "ClCl")
      return 3;
    else if (name == "EsEs")
      return 4;
    else if (name == "eps_s")
      return 5;
    else if (name == "eps_m")
      return 6;
    else if (name == "Dna")
      return 7;
    else if (name == "qna")
      return 8;
    else if (name == "Dk")
      return 9;
    else if (name == "qk")
      return 10;
    else if (name == "Dcl")
      return 11;
    else if (name == "qcl")
      return 12;
    else if (name == "Dca")
      return 13;
    else if (name == "qca")
      return 14;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "NaNa";
    case 1:
      return "KK";
    case 2:
      return "CaCa";
    case 3:
      return "ClCl";
    case 4:
      return "EsEs";
    case 5:
      return "eps_s";
    case 6:
      return "eps_m";
    case 7:
      return "Dna";
    case 8:
      return "qna";
    case 9:
      return "Dk";
    case 10:
      return "qk";
    case 11:
      return "Dcl";
    case 12:
      return "qcl";
    case 13:
      return "Dca";
    case 14:
      return "qca";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_NaNa;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_KK;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_CaCa;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_ClCl;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_EsEs;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_eps_s;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_eps_m;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_Dna;
  typedef Form_a_FunctionSpace_10 CoefficientSpace_qna;
  typedef Form_a_FunctionSpace_11 CoefficientSpace_Dk;
  typedef Form_a_FunctionSpace_12 CoefficientSpace_qk;
  typedef Form_a_FunctionSpace_13 CoefficientSpace_Dcl;
  typedef Form_a_FunctionSpace_14 CoefficientSpace_qcl;
  typedef Form_a_FunctionSpace_15 CoefficientSpace_Dca;
  typedef Form_a_FunctionSpace_16 CoefficientSpace_qca;

  // Coefficients
  dolfin::CoefficientAssigner NaNa;
  dolfin::CoefficientAssigner KK;
  dolfin::CoefficientAssigner CaCa;
  dolfin::CoefficientAssigner ClCl;
  dolfin::CoefficientAssigner EsEs;
  dolfin::CoefficientAssigner eps_s;
  dolfin::CoefficientAssigner eps_m;
  dolfin::CoefficientAssigner Dna;
  dolfin::CoefficientAssigner qna;
  dolfin::CoefficientAssigner Dk;
  dolfin::CoefficientAssigner qk;
  dolfin::CoefficientAssigner Dcl;
  dolfin::CoefficientAssigner qcl;
  dolfin::CoefficientAssigner Dca;
  dolfin::CoefficientAssigner qca;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  //--- Constructors for standard function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh)))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh)))
  {
    // Do nothing
  }

  //--- Constructors for constrained function space, 2 different versions ---

  // Create standard function space (reference version)
  Form_L_FunctionSpace_0(const dolfin::Mesh& mesh, const dolfin::SubDomain& constrained_domain):
    dolfin::FunctionSpace(dolfin::reference_to_no_delete_pointer(mesh),
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), mesh,
                              dolfin::reference_to_no_delete_pointer(constrained_domain))))
  {
    // Do nothing
  }

  // Create standard function space (shared pointer version)
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::shared_ptr<const dolfin::FiniteElement>(new dolfin::FiniteElement(std::shared_ptr<ufc::finite_element>(new protein_four_species_finite_element_2()))),
                          std::shared_ptr<const dolfin::DofMap>(new dolfin::DofMap(std::shared_ptr<ufc::dofmap>(new protein_four_species_dofmap_2()), *mesh, constrained_domain)))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_NaNa Form_L_FunctionSpace_1;

typedef CoefficientSpace_KK Form_L_FunctionSpace_2;

typedef CoefficientSpace_CaCa Form_L_FunctionSpace_3;

typedef CoefficientSpace_ClCl Form_L_FunctionSpace_4;

typedef CoefficientSpace_EsEs Form_L_FunctionSpace_5;

typedef CoefficientSpace_eps_s Form_L_FunctionSpace_6;

typedef CoefficientSpace_eps_m Form_L_FunctionSpace_7;

typedef CoefficientSpace_Dna Form_L_FunctionSpace_8;

typedef CoefficientSpace_qna Form_L_FunctionSpace_9;

typedef CoefficientSpace_Dk Form_L_FunctionSpace_10;

typedef CoefficientSpace_qk Form_L_FunctionSpace_11;

typedef CoefficientSpace_Dcl Form_L_FunctionSpace_12;

typedef CoefficientSpace_qcl Form_L_FunctionSpace_13;

typedef CoefficientSpace_Dca Form_L_FunctionSpace_14;

typedef CoefficientSpace_qca Form_L_FunctionSpace_15;

typedef CoefficientSpace_phi_surf Form_L_FunctionSpace_16;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, const dolfin::GenericFunction& NaNa, const dolfin::GenericFunction& KK, const dolfin::GenericFunction& CaCa, const dolfin::GenericFunction& ClCl, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_s, const dolfin::GenericFunction& eps_m, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca, const dolfin::GenericFunction& phi_surf):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->NaNa = NaNa;
    this->KK = KK;
    this->CaCa = CaCa;
    this->ClCl = ClCl;
    this->EsEs = EsEs;
    this->eps_s = eps_s;
    this->eps_m = eps_m;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;
    this->phi_surf = phi_surf;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Constructor
  Form_L(const dolfin::FunctionSpace& V0, std::shared_ptr<const dolfin::GenericFunction> NaNa, std::shared_ptr<const dolfin::GenericFunction> KK, std::shared_ptr<const dolfin::GenericFunction> CaCa, std::shared_ptr<const dolfin::GenericFunction> ClCl, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_s, std::shared_ptr<const dolfin::GenericFunction> eps_m, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca, std::shared_ptr<const dolfin::GenericFunction> phi_surf):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = reference_to_no_delete_pointer(V0);

    this->NaNa = *NaNa;
    this->KK = *KK;
    this->CaCa = *CaCa;
    this->ClCl = *ClCl;
    this->EsEs = *EsEs;
    this->eps_s = *eps_s;
    this->eps_m = *eps_m;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;
    this->phi_surf = *phi_surf;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, const dolfin::GenericFunction& NaNa, const dolfin::GenericFunction& KK, const dolfin::GenericFunction& CaCa, const dolfin::GenericFunction& ClCl, const dolfin::GenericFunction& EsEs, const dolfin::GenericFunction& eps_s, const dolfin::GenericFunction& eps_m, const dolfin::GenericFunction& Dna, const dolfin::GenericFunction& qna, const dolfin::GenericFunction& Dk, const dolfin::GenericFunction& qk, const dolfin::GenericFunction& Dcl, const dolfin::GenericFunction& qcl, const dolfin::GenericFunction& Dca, const dolfin::GenericFunction& qca, const dolfin::GenericFunction& phi_surf):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = V0;

    this->NaNa = NaNa;
    this->KK = KK;
    this->CaCa = CaCa;
    this->ClCl = ClCl;
    this->EsEs = EsEs;
    this->eps_s = eps_s;
    this->eps_m = eps_m;
    this->Dna = Dna;
    this->qna = qna;
    this->Dk = Dk;
    this->qk = qk;
    this->Dcl = Dcl;
    this->qcl = qcl;
    this->Dca = Dca;
    this->qca = qca;
    this->phi_surf = phi_surf;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> NaNa, std::shared_ptr<const dolfin::GenericFunction> KK, std::shared_ptr<const dolfin::GenericFunction> CaCa, std::shared_ptr<const dolfin::GenericFunction> ClCl, std::shared_ptr<const dolfin::GenericFunction> EsEs, std::shared_ptr<const dolfin::GenericFunction> eps_s, std::shared_ptr<const dolfin::GenericFunction> eps_m, std::shared_ptr<const dolfin::GenericFunction> Dna, std::shared_ptr<const dolfin::GenericFunction> qna, std::shared_ptr<const dolfin::GenericFunction> Dk, std::shared_ptr<const dolfin::GenericFunction> qk, std::shared_ptr<const dolfin::GenericFunction> Dcl, std::shared_ptr<const dolfin::GenericFunction> qcl, std::shared_ptr<const dolfin::GenericFunction> Dca, std::shared_ptr<const dolfin::GenericFunction> qca, std::shared_ptr<const dolfin::GenericFunction> phi_surf):
    dolfin::Form(1, 16), NaNa(*this, 0), KK(*this, 1), CaCa(*this, 2), ClCl(*this, 3), EsEs(*this, 4), eps_s(*this, 5), eps_m(*this, 6), Dna(*this, 7), qna(*this, 8), Dk(*this, 9), qk(*this, 10), Dcl(*this, 11), qcl(*this, 12), Dca(*this, 13), qca(*this, 14), phi_surf(*this, 15)
  {
    _function_spaces[0] = V0;

    this->NaNa = *NaNa;
    this->KK = *KK;
    this->CaCa = *CaCa;
    this->ClCl = *ClCl;
    this->EsEs = *EsEs;
    this->eps_s = *eps_s;
    this->eps_m = *eps_m;
    this->Dna = *Dna;
    this->qna = *qna;
    this->Dk = *Dk;
    this->qk = *qk;
    this->Dcl = *Dcl;
    this->qcl = *qcl;
    this->Dca = *Dca;
    this->qca = *qca;
    this->phi_surf = *phi_surf;

    _ufc_form = std::shared_ptr<const ufc::form>(new protein_four_species_form_1());
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "NaNa")
      return 0;
    else if (name == "KK")
      return 1;
    else if (name == "CaCa")
      return 2;
    else if (name == "ClCl")
      return 3;
    else if (name == "EsEs")
      return 4;
    else if (name == "eps_s")
      return 5;
    else if (name == "eps_m")
      return 6;
    else if (name == "Dna")
      return 7;
    else if (name == "qna")
      return 8;
    else if (name == "Dk")
      return 9;
    else if (name == "qk")
      return 10;
    else if (name == "Dcl")
      return 11;
    else if (name == "qcl")
      return 12;
    else if (name == "Dca")
      return 13;
    else if (name == "qca")
      return 14;
    else if (name == "phi_surf")
      return 15;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "NaNa";
    case 1:
      return "KK";
    case 2:
      return "CaCa";
    case 3:
      return "ClCl";
    case 4:
      return "EsEs";
    case 5:
      return "eps_s";
    case 6:
      return "eps_m";
    case 7:
      return "Dna";
    case 8:
      return "qna";
    case 9:
      return "Dk";
    case 10:
      return "qk";
    case 11:
      return "Dcl";
    case 12:
      return "qcl";
    case 13:
      return "Dca";
    case 14:
      return "qca";
    case 15:
      return "phi_surf";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_NaNa;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_KK;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_CaCa;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_ClCl;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_EsEs;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_eps_s;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_eps_m;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_Dna;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_qna;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_Dk;
  typedef Form_L_FunctionSpace_11 CoefficientSpace_qk;
  typedef Form_L_FunctionSpace_12 CoefficientSpace_Dcl;
  typedef Form_L_FunctionSpace_13 CoefficientSpace_qcl;
  typedef Form_L_FunctionSpace_14 CoefficientSpace_Dca;
  typedef Form_L_FunctionSpace_15 CoefficientSpace_qca;
  typedef Form_L_FunctionSpace_16 CoefficientSpace_phi_surf;

  // Coefficients
  dolfin::CoefficientAssigner NaNa;
  dolfin::CoefficientAssigner KK;
  dolfin::CoefficientAssigner CaCa;
  dolfin::CoefficientAssigner ClCl;
  dolfin::CoefficientAssigner EsEs;
  dolfin::CoefficientAssigner eps_s;
  dolfin::CoefficientAssigner eps_m;
  dolfin::CoefficientAssigner Dna;
  dolfin::CoefficientAssigner qna;
  dolfin::CoefficientAssigner Dk;
  dolfin::CoefficientAssigner qk;
  dolfin::CoefficientAssigner Dcl;
  dolfin::CoefficientAssigner qcl;
  dolfin::CoefficientAssigner Dca;
  dolfin::CoefficientAssigner qca;
  dolfin::CoefficientAssigner phi_surf;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef Form_a JacobianForm;
typedef Form_L LinearForm;
typedef Form_L ResidualForm;
typedef Form_a::TestSpace FunctionSpace;

}

#endif
